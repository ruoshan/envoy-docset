.. _envoy_api_file_envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto:

HTTP connection manager
=======================

HTTP connection manager :ref:`configuration overview <config_http_conn_man>`.

.. _envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpConnectionManager:

config.filter.network.http_connection_manager.v2.HttpConnectionManager
----------------------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpConnectionManager proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L22>`_


.. code-block:: json

  {
    "codec_type": "...",
    "stat_prefix": "...",
    "rds": "{...}",
    "route_config": "{...}",
    "http_filters": [],
    "add_user_agent": "{...}",
    "tracing": "{...}",
    "http_protocol_options": "{...}",
    "http2_protocol_options": "{...}",
    "server_name": "...",
    "idle_timeout": "{...}",
    "drain_timeout": "{...}",
    "access_log": [],
    "use_remote_address": "{...}",
    "xff_num_trusted_hops": "...",
    "skip_xff_append": "...",
    "via": "...",
    "generate_request_id": "{...}",
    "forward_client_cert_details": "...",
    "set_current_client_cert_details": "{...}",
    "proxy_100_continue": "...",
    "represent_ipv4_remote_address_as_ipv4_mapped_ipv6": "..."
  }

.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type:

codec_type
  (:ref:`config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType <envoy_api_enum_config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType>`) Supplies the type of codec that the connection manager should use.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The human readable prefix to use when emitting statistics for the
  connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
  more information.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds:

rds
  (:ref:`config.filter.network.http_connection_manager.v2.Rds <envoy_api_msg_config.filter.network.http_connection_manager.v2.Rds>`) The connection manager’s route table will be dynamically loaded via the RDS API.
  
  
  Precisely one of :ref:`rds <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds>`, :ref:`route_config <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config>` must be set.
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config:

route_config
  (:ref:`RouteConfiguration <envoy_api_msg_RouteConfiguration>`) The route table for the connection manager is static and is specified in this property.
  
  
  Precisely one of :ref:`rds <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds>`, :ref:`route_config <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config>` must be set.
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.http_filters:

http_filters
  (:ref:`config.filter.network.http_connection_manager.v2.HttpFilter <envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpFilter>`) A list of individual HTTP filters that make up the filter chain for
  requests made to the connection manager. Order matters as the filters are
  processed sequentially as request events happen.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.add_user_agent:

add_user_agent
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
  and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
  documentation for more information. Defaults to false.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.tracing:

tracing
  (:ref:`config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing <envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing>`) Presence of the object defines whether the connection manager
  emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
  <envoy_api_msg_config.trace.v2.Tracing>`.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.http_protocol_options:

http_protocol_options
  (:ref:`core.Http1ProtocolOptions <envoy_api_msg_core.Http1ProtocolOptions>`) Additional HTTP/1 settings that are passed to the HTTP/1 codec.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.http2_protocol_options:

http2_protocol_options
  (:ref:`core.Http2ProtocolOptions <envoy_api_msg_core.Http2ProtocolOptions>`) Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.server_name:

server_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional override that the connection manager will write to the server
  header in responses. If not set, the default is *envoy*.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.idle_timeout:

idle_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The idle timeout for connections managed by the connection manager. The
  idle timeout is defined as the period in which there are no active
  requests. If not set, there is no idle timeout. When the idle timeout is
  reached the connection will be closed. If the connection is an HTTP/2
  connection a drain sequence will occur prior to closing the connection. See
  :ref:`drain_timeout
  <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout>`.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout:

drain_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The time that Envoy will wait between sending an HTTP/2 “shutdown
  notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
  This is used so that Envoy provides a grace period for new streams that
  race with the final GOAWAY frame. During this grace period, Envoy will
  continue to accept new streams. After the grace period, a final GOAWAY
  frame is sent and Envoy will start refusing new streams. Draining occurs
  both when a connection hits the idle timeout or during general server
  draining. The default grace period is 5000 milliseconds (5 seconds) if this
  option is not specified.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.access_log:

access_log
  (:ref:`config.filter.accesslog.v2.AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`) Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
  emitted by the connection manager.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address:

use_remote_address
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) If set to true, the connection manager will use the real remote address
  of the client connection when determining internal versus external origin and manipulating
  various headers. If set to false or absent, the connection manager will use the
  :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
  :ref:`config_http_conn_man_headers_x-forwarded-for`,
  :ref:`config_http_conn_man_headers_x-envoy-internal`, and
  :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.xff_num_trusted_hops:

xff_num_trusted_hops
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The number of additional ingress proxy hops from the right side of the
  :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
  determining the origin client's IP address. The default is zero if this option
  is not specified. See the documentation for
  :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.skip_xff_append:

skip_xff_append
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If set, Envoy will not append the remote address to the
  :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. This may be used in
  conjunction with HTTP filters that explicitly manipulate XFF after the HTTP connection manager
  has mutated the request headers. While :ref:`use_remote_address
  <config_http_conn_man_use_remote_address>` will also suppress XFF addition, it has consequences
  for logging and other Envoy uses of the remote address, so *skip_xff_append* should be used
  when only an elision of XFF addition is intended.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.via:

via
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Via header value to append to request and response headers. If this is
  empty, no via header will be appended.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.generate_request_id:

generate_request_id
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the connection manager will generate the :ref:`x-request-id
  <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to
  true. Generating a random UUID4 is expensive so in high throughput scenarios where this feature
  is not desired it can be disabled.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.forward_client_cert_details:

forward_client_cert_details
  (:ref:`config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails <envoy_api_enum_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails>`) How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
  header.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.set_current_client_cert_details:

set_current_client_cert_details
  (:ref:`config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails <envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails>`) This field is valid only when :ref:`forward_client_cert_details
  <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.forward_client_cert_details>`
  is APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
  the client certificate to be forwarded. Note that in the
  :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, *Hash* is always set, and
  *By* is always set when the client certificate presents the URI type Subject Alternative Name
  value.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.proxy_100_continue:

proxy_100_continue
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If proxy_100_continue is true, Envoy will proxy incoming "Expect:
  100-continue" headers upstream, and forward "100 Continue" responses
  downstream. If this is false or not set, Envoy will instead strip the
  "Expect: 100-continue" header, and send a "100 Continue" response itself.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.represent_ipv4_remote_address_as_ipv4_mapped_ipv6:

represent_ipv4_remote_address_as_ipv4_mapped_ipv6
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If
  :ref:`use_remote_address
  <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address>`
  is true and represent_ipv4_remote_address_as_ipv4_mapped_ipv6 is true and the remote address is
  an IPv4 address, the address will be mapped to IPv6 before it is appended to *x-forwarded-for*.
  This is useful for testing compatibility of upstream services that parse the header value. For
  example, 50.0.0.1 is represented as ::FFFF:50.0.0.1. See `IPv4-Mapped IPv6 Addresses
  <https://tools.ietf.org/html/rfc4291#section-2.5.5.2>`_ for details. This will also affect the
  :ref:`config_http_conn_man_headers_x-envoy-external-address` header. See
  :ref:`http_connection_manager.represent_ipv4_remote_address_as_ipv4_mapped_ipv6
  <config_http_conn_man_runtime_represent_ipv4_remote_address_as_ipv4_mapped_ipv6>` for runtime
  control.
  
  
.. _envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing:

config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing
------------------------------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L70>`_


.. code-block:: json

  {
    "operation_name": "...",
    "request_headers_for_tags": []
  }

.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.operation_name:

operation_name
  (:ref:`config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName <envoy_api_enum_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName>`) The span name will be derived from this field.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.request_headers_for_tags:

request_headers_for_tags
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) A list of header names used to create tags for the active span. The header name is used to
  populate the tag name, and the header value is used to populate the tag value. The tag is
  created if the specified header name is present in the request's headers.
  
  




.. _envoy_api_enum_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName:

Enum config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName
-------------------------------------------------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L71>`_


.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName.INGRESS:

INGRESS
  *(DEFAULT)* ⁣The HTTP listener is used for ingress/incoming requests.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.OperationName.EGRESS:

EGRESS
  ⁣The HTTP listener is used for egress/outgoing requests.
  
  

.. _envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails:

config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails
--------------------------------------------------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L222>`_


.. code-block:: json

  {
    "subject": "{...}",
    "san": "{...}",
    "cert": "...",
    "dns": "...",
    "uri": "..."
  }

.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails.subject:

subject
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether to forward the subject of the client cert. Defaults to false.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails.san:

san
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
  false. This field is deprecated, use URI field instead.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails.cert:

cert
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the entire client cert in URL encoded PEM format. This will appear in the
  XFCC header comma separated from other values with the value Cert="PEM".
  Defaults to false.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails.dns:

dns
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the DNS type Subject Alternative Names of the client cert.
  Defaults to false.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails.uri:

uri
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
  false.
  
  


.. _envoy_api_enum_config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType:

Enum config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType
-------------------------------------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L23>`_


.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType.AUTO:

AUTO
  *(DEFAULT)* ⁣For every new connection, the connection manager will determine which
  codec to use. This mode supports both ALPN for TLS listeners as well as
  protocol inference for plaintext listeners. If ALPN data is available, it
  is preferred, otherwise protocol inference is used. In almost all cases,
  this is the right option to choose for this setting.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType.HTTP1:

HTTP1
  ⁣The connection manager will assume that the client is speaking HTTP/1.1.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.CodecType.HTTP2:

HTTP2
  ⁣The connection manager will assume that the client is speaking HTTP/2
  (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
  Prior knowledge is allowed).
  
  

.. _envoy_api_enum_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails:

Enum config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails
----------------------------------------------------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L194>`_

How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
header.

.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails.SANITIZE:

SANITIZE
  *(DEFAULT)* ⁣Do not send the XFCC header to the next hop. This is the default value.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails.FORWARD_ONLY:

FORWARD_ONLY
  ⁣When the client connection is mTLS (Mutual TLS), forward the XFCC header
  in the request.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails.APPEND_FORWARD:

APPEND_FORWARD
  ⁣When the client connection is mTLS, append the client certificate
  information to the request’s XFCC header and forward it.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails.SANITIZE_SET:

SANITIZE_SET
  ⁣When the client connection is mTLS, reset the XFCC header with the client
  certificate information and send it to the next hop.
  
  
.. _envoy_api_enum_value_config.filter.network.http_connection_manager.v2.HttpConnectionManager.ForwardClientCertDetails.ALWAYS_FORWARD_ONLY:

ALWAYS_FORWARD_ONLY
  ⁣Always forward the XFCC header in the request, regardless of whether the
  client connection is mTLS.
  
  

.. _envoy_api_msg_config.filter.network.http_connection_manager.v2.Rds:

config.filter.network.http_connection_manager.v2.Rds
----------------------------------------------------

`[config.filter.network.http_connection_manager.v2.Rds proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L274>`_


.. code-block:: json

  {
    "config_source": "{...}",
    "route_config_name": "..."
  }

.. _envoy_api_field_config.filter.network.http_connection_manager.v2.Rds.config_source:

config_source
  (:ref:`core.ConfigSource <envoy_api_msg_core.ConfigSource>`, *REQUIRED*) Configuration source specifier for RDS.
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.Rds.route_config_name:

route_config_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the route configuration. This name will be passed to the RDS
  API. This allows an Envoy configuration with multiple HTTP listeners (and
  associated HTTP connection manager filters) to use different route
  configurations.
  
  


.. _envoy_api_msg_config.filter.network.http_connection_manager.v2.HttpFilter:

config.filter.network.http_connection_manager.v2.HttpFilter
-----------------------------------------------------------

`[config.filter.network.http_connection_manager.v2.HttpFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L286>`_


.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpFilter.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the filter to instantiate. The name must match a supported
  filter. The built-in filters are:
  
  * :ref:`envoy.buffer <config_http_filters_buffer>`
  * :ref:`envoy.cors <config_http_filters_cors>`
  * :ref:`envoy.fault <config_http_filters_fault_injection>`
  * :ref:`envoy.gzip <config_http_filters_gzip>`
  * :ref:`envoy.http_dynamo_filter <config_http_filters_dynamo>`
  * :ref:`envoy.grpc_http1_bridge <config_http_filters_grpc_bridge>`
  * :ref:`envoy.grpc_json_transcoder <config_http_filters_grpc_json_transcoder>`
  * :ref:`envoy.grpc_web <config_http_filters_grpc_web>`
  * :ref:`envoy.health_check <config_http_filters_health_check>`
  * :ref:`envoy.header_to_metadata <config_http_filters_header_to_metadata>`
  * :ref:`envoy.ip_tagging <config_http_filters_ip_tagging>`
  * :ref:`envoy.lua <config_http_filters_lua>`
  * :ref:`envoy.rate_limit <config_http_filters_rate_limit>`
  * :ref:`envoy.router <config_http_filters_router>`
  * :ref:`envoy.squash <config_http_filters_squash>`
  
  
.. _envoy_api_field_config.filter.network.http_connection_manager.v2.HttpFilter.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Filter specific configuration which depends on the filter being
  instantiated. See the supported filters for further documentation.
  
  


