.. _envoy_api_file_envoy/config/filter/accesslog/v2/accesslog.proto:

Common access log types
=======================


.. _envoy_api_msg_config.filter.accesslog.v2.AccessLog:

config.filter.accesslog.v2.AccessLog
------------------------------------

`[config.filter.accesslog.v2.AccessLog proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L15>`_


.. code-block:: json

  {
    "name": "...",
    "filter": "{...}",
    "config": "{...}"
  }

.. _envoy_api_field_config.filter.accesslog.v2.AccessLog.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the access log implementation to instantiate. The name must
  match a statically registered access log. Current built-in loggers include:
  
  #. "envoy.file_access_log"
  #. "envoy.http_grpc_access_log"
  
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLog.filter:

filter
  (:ref:`config.filter.accesslog.v2.AccessLogFilter <envoy_api_msg_config.filter.accesslog.v2.AccessLogFilter>`) Filter which is used to determine if the access log needs to be written.
  
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLog.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Custom configuration that depends on the access log being instantiated. Built-in configurations
  include:
  
  #. "envoy.file_access_log": :ref:`FileAccessLog
     <envoy_api_msg_config.accesslog.v2.FileAccessLog>`
  #. "envoy.http_grpc_access_log": :ref:`HttpGrpcAccessLogConfig
     <envoy_api_msg_config.accesslog.v2.HttpGrpcAccessLogConfig>`
  
  


.. _envoy_api_msg_config.filter.accesslog.v2.AccessLogFilter:

config.filter.accesslog.v2.AccessLogFilter
------------------------------------------

`[config.filter.accesslog.v2.AccessLogFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L36>`_


.. code-block:: json

  {
    "status_code_filter": "{...}",
    "duration_filter": "{...}",
    "not_health_check_filter": "{...}",
    "traceable_filter": "{...}",
    "runtime_filter": "{...}",
    "and_filter": "{...}",
    "or_filter": "{...}",
    "header_filter": "{...}"
  }

.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter:

status_code_filter
  (:ref:`config.filter.accesslog.v2.StatusCodeFilter <envoy_api_msg_config.filter.accesslog.v2.StatusCodeFilter>`) Status code filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter:

duration_filter
  (:ref:`config.filter.accesslog.v2.DurationFilter <envoy_api_msg_config.filter.accesslog.v2.DurationFilter>`) Duration filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter:

not_health_check_filter
  (:ref:`config.filter.accesslog.v2.NotHealthCheckFilter <envoy_api_msg_config.filter.accesslog.v2.NotHealthCheckFilter>`) Not health check filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter:

traceable_filter
  (:ref:`config.filter.accesslog.v2.TraceableFilter <envoy_api_msg_config.filter.accesslog.v2.TraceableFilter>`) Traceable filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter:

runtime_filter
  (:ref:`config.filter.accesslog.v2.RuntimeFilter <envoy_api_msg_config.filter.accesslog.v2.RuntimeFilter>`) Runtime filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter:

and_filter
  (:ref:`config.filter.accesslog.v2.AndFilter <envoy_api_msg_config.filter.accesslog.v2.AndFilter>`) And filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter:

or_filter
  (:ref:`config.filter.accesslog.v2.OrFilter <envoy_api_msg_config.filter.accesslog.v2.OrFilter>`) Or filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  
.. _envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter:

header_filter
  (:ref:`config.filter.accesslog.v2.HeaderFilter <envoy_api_msg_config.filter.accesslog.v2.HeaderFilter>`) Header filter.
  
  
  Precisely one of :ref:`status_code_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.status_code_filter>`, :ref:`duration_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.duration_filter>`, :ref:`not_health_check_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.not_health_check_filter>`, :ref:`traceable_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.traceable_filter>`, :ref:`runtime_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.runtime_filter>`, :ref:`and_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.and_filter>`, :ref:`or_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.or_filter>`, :ref:`header_filter <envoy_api_field_config.filter.accesslog.v2.AccessLogFilter.header_filter>` must be set.
  


.. _envoy_api_msg_config.filter.accesslog.v2.ComparisonFilter:

config.filter.accesslog.v2.ComparisonFilter
-------------------------------------------

`[config.filter.accesslog.v2.ComparisonFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L67>`_

Filter on an integer comparison.

.. code-block:: json

  {
    "op": "...",
    "value": "{...}"
  }

.. _envoy_api_field_config.filter.accesslog.v2.ComparisonFilter.op:

op
  (:ref:`config.filter.accesslog.v2.ComparisonFilter.Op <envoy_api_enum_config.filter.accesslog.v2.ComparisonFilter.Op>`) Comparison operator.
  
  
.. _envoy_api_field_config.filter.accesslog.v2.ComparisonFilter.value:

value
  (:ref:`core.RuntimeUInt32 <envoy_api_msg_core.RuntimeUInt32>`) Value to compare against.
  
  

.. _envoy_api_enum_config.filter.accesslog.v2.ComparisonFilter.Op:

Enum config.filter.accesslog.v2.ComparisonFilter.Op
---------------------------------------------------

`[config.filter.accesslog.v2.ComparisonFilter.Op proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L68>`_


.. _envoy_api_enum_value_config.filter.accesslog.v2.ComparisonFilter.Op.EQ:

EQ
  *(DEFAULT)* ⁣=
  
  
.. _envoy_api_enum_value_config.filter.accesslog.v2.ComparisonFilter.Op.GE:

GE
  ⁣>=
  
  
.. _envoy_api_enum_value_config.filter.accesslog.v2.ComparisonFilter.Op.LE:

LE
  ⁣<=
  
  

.. _envoy_api_msg_config.filter.accesslog.v2.StatusCodeFilter:

config.filter.accesslog.v2.StatusCodeFilter
-------------------------------------------

`[config.filter.accesslog.v2.StatusCodeFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L87>`_

Filters on HTTP response/status code.

.. code-block:: json

  {
    "comparison": "{...}"
  }

.. _envoy_api_field_config.filter.accesslog.v2.StatusCodeFilter.comparison:

comparison
  (:ref:`config.filter.accesslog.v2.ComparisonFilter <envoy_api_msg_config.filter.accesslog.v2.ComparisonFilter>`, *REQUIRED*) Comparison.
  
  


.. _envoy_api_msg_config.filter.accesslog.v2.DurationFilter:

config.filter.accesslog.v2.DurationFilter
-----------------------------------------

`[config.filter.accesslog.v2.DurationFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L93>`_

Filters on total request duration in milliseconds.

.. code-block:: json

  {
    "comparison": "{...}"
  }

.. _envoy_api_field_config.filter.accesslog.v2.DurationFilter.comparison:

comparison
  (:ref:`config.filter.accesslog.v2.ComparisonFilter <envoy_api_msg_config.filter.accesslog.v2.ComparisonFilter>`, *REQUIRED*) Comparison.
  
  


.. _envoy_api_msg_config.filter.accesslog.v2.NotHealthCheckFilter:

config.filter.accesslog.v2.NotHealthCheckFilter
-----------------------------------------------

`[config.filter.accesslog.v2.NotHealthCheckFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L100>`_

Filters for requests that are not health check requests. A health check
request is marked by the health check filter.

.. code-block:: json

  {}




.. _envoy_api_msg_config.filter.accesslog.v2.TraceableFilter:

config.filter.accesslog.v2.TraceableFilter
------------------------------------------

`[config.filter.accesslog.v2.TraceableFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L105>`_

Filters for requests that are traceable. See the tracing overview for more
information on how a request becomes traceable.

.. code-block:: json

  {}




.. _envoy_api_msg_config.filter.accesslog.v2.RuntimeFilter:

config.filter.accesslog.v2.RuntimeFilter
----------------------------------------

`[config.filter.accesslog.v2.RuntimeFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L109>`_

Filters for random sampling of requests.

.. code-block:: json

  {
    "runtime_key": "...",
    "percent_sampled": "{...}",
    "use_independent_randomness": "..."
  }

.. _envoy_api_field_config.filter.accesslog.v2.RuntimeFilter.runtime_key:

runtime_key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Runtime key to get an optional overridden numerator for use in the *percent_sampled* field.
  If found in runtime, this value will replace the default numerator.
  
  
.. _envoy_api_field_config.filter.accesslog.v2.RuntimeFilter.percent_sampled:

percent_sampled
  (:ref:`type.FractionalPercent <envoy_api_msg_type.FractionalPercent>`) The default sampling percentage. If not specified, defaults to 0% with denominator of 100.
  
  
.. _envoy_api_field_config.filter.accesslog.v2.RuntimeFilter.use_independent_randomness:

use_independent_randomness
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) By default, sampling pivots on the header
  :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being present. If
  :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` is present, the filter will
  consistently sample across multiple hosts based on the runtime key value and the value
  extracted from :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is
  missing, or *use_independent_randomness* is set to true, the filter will randomly sample based
  on the runtime key value alone. *use_independent_randomness* can be used for logging kill
  switches within complex nested :ref:`AndFilter
  <envoy_api_msg_config.filter.accesslog.v2.AndFilter>` and :ref:`OrFilter
  <envoy_api_msg_config.filter.accesslog.v2.OrFilter>` blocks that are easier to reason about
  from a probability perspective (i.e., setting to true will cause the filter to behave like
  an independent random variable when composed within logical operator filters).
  
  


.. _envoy_api_msg_config.filter.accesslog.v2.AndFilter:

config.filter.accesslog.v2.AndFilter
------------------------------------

`[config.filter.accesslog.v2.AndFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L135>`_

Performs a logical “and” operation on the result of each filter in filters.
Filters are evaluated sequentially and if one of them returns false, the
filter returns false immediately.

.. code-block:: json

  {
    "filters": []
  }

.. _envoy_api_field_config.filter.accesslog.v2.AndFilter.filters:

filters
  (:ref:`config.filter.accesslog.v2.AccessLogFilter <envoy_api_msg_config.filter.accesslog.v2.AccessLogFilter>`, *REQUIRED*) 
  


.. _envoy_api_msg_config.filter.accesslog.v2.OrFilter:

config.filter.accesslog.v2.OrFilter
-----------------------------------

`[config.filter.accesslog.v2.OrFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L142>`_

Performs a logical “or” operation on the result of each individual filter.
Filters are evaluated sequentially and if one of them returns true, the
filter returns true immediately.

.. code-block:: json

  {
    "filters": []
  }

.. _envoy_api_field_config.filter.accesslog.v2.OrFilter.filters:

filters
  (:ref:`config.filter.accesslog.v2.AccessLogFilter <envoy_api_msg_config.filter.accesslog.v2.AccessLogFilter>`, *REQUIRED*) 
  


.. _envoy_api_msg_config.filter.accesslog.v2.HeaderFilter:

config.filter.accesslog.v2.HeaderFilter
---------------------------------------

`[config.filter.accesslog.v2.HeaderFilter proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/accesslog/v2/accesslog.proto#L147>`_

Filters requests based on the presence or value of a request header.

.. code-block:: json

  {
    "header": "{...}"
  }

.. _envoy_api_field_config.filter.accesslog.v2.HeaderFilter.header:

header
  (:ref:`route.HeaderMatcher <envoy_api_msg_route.HeaderMatcher>`, *REQUIRED*) Only requests with a header which matches the specified HeaderMatcher will pass the filter
  check.
  
  

