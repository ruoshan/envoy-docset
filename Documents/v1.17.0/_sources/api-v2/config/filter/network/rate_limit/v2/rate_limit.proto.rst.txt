.. _envoy_api_file_envoy/config/filter/network/rate_limit/v2/rate_limit.proto:

Rate limit
==========

.. _extension_envoy.filters.network.ratelimit:


This extension may be referenced by the qualified name *envoy.filters.network.ratelimit*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

Rate limit :ref:`configuration overview <config_network_filters_rate_limit>`.

.. _envoy_api_msg_config.filter.network.rate_limit.v2.RateLimit:

config.filter.network.rate_limit.v2.RateLimit
---------------------------------------------

`[config.filter.network.rate_limit.v2.RateLimit proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/config/filter/network/rate_limit/v2/rate_limit.proto#L25>`_


.. code-block:: json

  {
    "stat_prefix": "...",
    "domain": "...",
    "descriptors": [],
    "timeout": "{...}",
    "failure_mode_deny": "...",
    "rate_limit_service": "{...}"
  }

.. _envoy_api_field_config.filter.network.rate_limit.v2.RateLimit.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The prefix to use when emitting :ref:`statistics <config_network_filters_rate_limit_stats>`.
  
  
.. _envoy_api_field_config.filter.network.rate_limit.v2.RateLimit.domain:

domain
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The rate limit domain to use in the rate limit service request.
  
  
.. _envoy_api_field_config.filter.network.rate_limit.v2.RateLimit.descriptors:

descriptors
  (**repeated** :ref:`ratelimit.RateLimitDescriptor <envoy_api_msg_ratelimit.RateLimitDescriptor>`, *REQUIRED*) The rate limit descriptor list to use in the rate limit service request.
  
  
.. _envoy_api_field_config.filter.network.rate_limit.v2.RateLimit.timeout:

timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The timeout in milliseconds for the rate limit service RPC. If not
  set, this defaults to 20ms.
  
  
.. _envoy_api_field_config.filter.network.rate_limit.v2.RateLimit.failure_mode_deny:

failure_mode_deny
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The filter's behaviour in case the rate limiting service does
  not respond back. When it is set to true, Envoy will not allow traffic in case of
  communication failure between rate limiting service and the proxy.
  Defaults to false.
  
  
.. _envoy_api_field_config.filter.network.rate_limit.v2.RateLimit.rate_limit_service:

rate_limit_service
  (:ref:`config.ratelimit.v2.RateLimitServiceConfig <envoy_api_msg_config.ratelimit.v2.RateLimitServiceConfig>`, *REQUIRED*) Configuration for an external rate limit service provider. If not
  specified, any calls to the rate limit service will immediately return
  success.
  
  

