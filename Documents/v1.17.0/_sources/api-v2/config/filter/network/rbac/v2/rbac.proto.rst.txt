.. _envoy_api_file_envoy/config/filter/network/rbac/v2/rbac.proto:

RBAC
====

.. _extension_envoy.filters.network.rbac:


This extension may be referenced by the qualified name *envoy.filters.network.rbac*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

Role-Based Access Control :ref:`configuration overview <config_network_filters_rbac>`.

.. _envoy_api_msg_config.filter.network.rbac.v2.RBAC:

config.filter.network.rbac.v2.RBAC
----------------------------------

`[config.filter.network.rbac.v2.RBAC proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/config/filter/network/rbac/v2/rbac.proto#L24>`_

RBAC network filter config.

Header should not be used in rules/shadow_rules in RBAC network filter as
this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.

.. code-block:: json

  {
    "rules": "{...}",
    "shadow_rules": "{...}",
    "stat_prefix": "...",
    "enforcement_type": "..."
  }

.. _envoy_api_field_config.filter.network.rbac.v2.RBAC.rules:

rules
  (:ref:`config.rbac.v2.RBAC <envoy_api_msg_config.rbac.v2.RBAC>`) Specify the RBAC rules to be applied globally.
  If absent, no enforcing RBAC policy will be applied.
  
  
.. _envoy_api_field_config.filter.network.rbac.v2.RBAC.shadow_rules:

shadow_rules
  (:ref:`config.rbac.v2.RBAC <envoy_api_msg_config.rbac.v2.RBAC>`) Shadow rules are not enforced by the filter but will emit stats and logs
  and can be used for rule testing.
  If absent, no shadow RBAC policy will be applied.
  
  
.. _envoy_api_field_config.filter.network.rbac.v2.RBAC.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The prefix to use when emitting statistics.
  
  
.. _envoy_api_field_config.filter.network.rbac.v2.RBAC.enforcement_type:

enforcement_type
  (:ref:`config.filter.network.rbac.v2.RBAC.EnforcementType <envoy_api_enum_config.filter.network.rbac.v2.RBAC.EnforcementType>`) RBAC enforcement strategy. By default RBAC will be enforced only once
  when the first byte of data arrives from the downstream. When used in
  conjunction with filters that emit dynamic metadata after decoding
  every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
  CONTINUOUS to enforce RBAC policies on every message boundary.
  
  

.. _envoy_api_enum_config.filter.network.rbac.v2.RBAC.EnforcementType:

Enum config.filter.network.rbac.v2.RBAC.EnforcementType
-------------------------------------------------------

`[config.filter.network.rbac.v2.RBAC.EnforcementType proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/config/filter/network/rbac/v2/rbac.proto#L25>`_


.. _envoy_api_enum_value_config.filter.network.rbac.v2.RBAC.EnforcementType.ONE_TIME_ON_FIRST_BYTE:

ONE_TIME_ON_FIRST_BYTE
  *(DEFAULT)* ⁣Apply RBAC policies when the first byte of data arrives on the connection.
  
  
.. _envoy_api_enum_value_config.filter.network.rbac.v2.RBAC.EnforcementType.CONTINUOUS:

CONTINUOUS
  ⁣Continuously apply RBAC policies as data arrives. Use this mode when
  using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
  etc. when the protocol decoders emit dynamic metadata such as the
  resources being accessed and the operations on the resources.
  
  
