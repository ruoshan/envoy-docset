.. _envoy_api_file_envoy/api/v2/listener.proto:

Listener configuration
======================

Listener :ref:`configuration overview <config_listeners>`

.. _envoy_api_msg_Listener:

Listener
--------

`[Listener proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/listener.proto#L30>`_


.. code-block:: json

  {
    "name": "...",
    "address": "{...}",
    "filter_chains": [],
    "use_original_dst": "{...}",
    "per_connection_buffer_limit_bytes": "{...}",
    "metadata": "{...}",
    "drain_type": "...",
    "listener_filters": [],
    "listener_filters_timeout": "{...}",
    "continue_on_listener_filters_timeout": "...",
    "transparent": "{...}",
    "freebind": "{...}",
    "socket_options": [],
    "tcp_fast_open_queue_length": "{...}",
    "traffic_direction": "...",
    "udp_listener_config": "{...}",
    "api_listener": "{...}",
    "connection_balance_config": "{...}",
    "reuse_port": "...",
    "access_log": []
  }

.. _envoy_api_field_Listener.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The unique name by which this listener is known. If no name is provided,
  Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
  updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided.
  
  
.. _envoy_api_field_Listener.address:

address
  (:ref:`core.Address <envoy_api_msg_core.Address>`, *REQUIRED*) The address that the listener should listen on. In general, the address must be unique, though
  that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
  Linux as the actual port will be allocated by the OS.
  
  
.. _envoy_api_field_Listener.filter_chains:

filter_chains
  (**repeated** :ref:`listener.FilterChain <envoy_api_msg_listener.FilterChain>`) A list of filter chains to consider for this listener. The
  :ref:`FilterChain <envoy_api_msg_listener.FilterChain>` with the most specific
  :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>` criteria is used on a
  connection.
  
  Example using SNI for filter chain selection can be found in the
  :ref:`FAQ entry <faq_how_to_setup_sni>`.
  
  
.. _envoy_api_field_Listener.use_original_dst:

use_original_dst
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) If a connection is redirected using *iptables*, the port on which the proxy
  receives it might be different from the original destination address. When this flag is set to
  true, the listener hands off redirected connections to the listener associated with the
  original destination address. If there is no listener associated with the original destination
  address, the connection is handled by the listener that receives it. Defaults to false.
  
  .. attention::
  
    This field is deprecated. Use :ref:`an original_dst <config_listener_filters_original_dst>`
    :ref:`listener filter <envoy_api_field_Listener.listener_filters>` instead.
  
    Note that hand off to another listener is *NOT* performed without this flag. Once
    :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>` is implemented this flag
    will be removed, as filter chain matching can be used to select a filter chain based on the
    restored destination address.
  
  
.. _envoy_api_field_Listener.per_connection_buffer_limit_bytes:

per_connection_buffer_limit_bytes
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Soft limit on size of the listener’s new connection read and write buffers.
  If unspecified, an implementation defined default is applied (1MiB).
  
  
.. _envoy_api_field_Listener.metadata:

metadata
  (:ref:`core.Metadata <envoy_api_msg_core.Metadata>`) Listener metadata.
  
  

.. _envoy_api_field_Listener.drain_type:

drain_type
  (:ref:`Listener.DrainType <envoy_api_enum_Listener.DrainType>`) The type of draining to perform at a listener-wide level.
  
  
.. _envoy_api_field_Listener.listener_filters:

listener_filters
  (**repeated** :ref:`listener.ListenerFilter <envoy_api_msg_listener.ListenerFilter>`) Listener filters have the opportunity to manipulate and augment the connection metadata that
  is used in connection filter chain matching, for example. These filters are run before any in
  :ref:`filter_chains <envoy_api_field_Listener.filter_chains>`. Order matters as the
  filters are processed sequentially right after a socket has been accepted by the listener, and
  before a connection is created.
  UDP Listener filters can be specified when the protocol in the listener socket address in
  :ref:`protocol <envoy_api_field_core.SocketAddress.protocol>` is :ref:`UDP
  <envoy_api_enum_value_core.SocketAddress.Protocol.UDP>`.
  UDP listeners currently support a single filter.
  
  
.. _envoy_api_field_Listener.listener_filters_timeout:

listener_filters_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The timeout to wait for all listener filters to complete operation. If the timeout is reached,
  the accepted socket is closed without a connection being created unless
  `continue_on_listener_filters_timeout` is set to true. Specify 0 to disable the
  timeout. If not specified, a default timeout of 15s is used.
  
  
.. _envoy_api_field_Listener.continue_on_listener_filters_timeout:

continue_on_listener_filters_timeout
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether a connection should be created when listener filters timeout. Default is false.
  
  .. attention::
  
    Some listener filters, such as :ref:`Proxy Protocol filter
    <config_listener_filters_proxy_protocol>`, should not be used with this option. It will cause
    unexpected behavior when a connection is created.
  
  
.. _envoy_api_field_Listener.transparent:

transparent
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the listener should be set as a transparent socket.
  When this flag is set to true, connections can be redirected to the listener using an
  *iptables* *TPROXY* target, in which case the original source and destination addresses and
  ports are preserved on accepted connections. This flag should be used in combination with
  :ref:`an original_dst <config_listener_filters_original_dst>` :ref:`listener filter
  <envoy_api_field_Listener.listener_filters>` to mark the connections' local addresses as
  "restored." This can be used to hand off each redirected connection to another listener
  associated with the connection's destination address. Direct connections to the socket without
  using *TPROXY* cannot be distinguished from connections redirected using *TPROXY* and are
  therefore treated as if they were redirected.
  When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
  Setting this flag requires Envoy to run with the *CAP_NET_ADMIN* capability.
  When this flag is not set (default), the socket is not modified, i.e. the transparent option
  is neither set nor reset.
  
  
.. _envoy_api_field_Listener.freebind:

freebind
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the listener should set the *IP_FREEBIND* socket option. When this
  flag is set to true, listeners can be bound to an IP address that is not
  configured on the system running Envoy. When this flag is set to false, the
  option *IP_FREEBIND* is disabled on the socket. When this flag is not set
  (default), the socket is not modified, i.e. the option is neither enabled
  nor disabled.
  
  
.. _envoy_api_field_Listener.socket_options:

socket_options
  (**repeated** :ref:`core.SocketOption <envoy_api_msg_core.SocketOption>`) Additional socket options that may not be present in Envoy source code or
  precompiled binaries.
  
  
.. _envoy_api_field_Listener.tcp_fast_open_queue_length:

tcp_fast_open_queue_length
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Whether the listener should accept TCP Fast Open (TFO) connections.
  When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
  the socket, with a queue length of the specified size
  (see `details in RFC7413 <https://tools.ietf.org/html/rfc7413#section-5.1>`_).
  When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
  When this flag is not set (default), the socket is not modified,
  i.e. the option is neither enabled nor disabled.
  
  On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
  TCP_FASTOPEN.
  See `ip-sysctl.txt <https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt>`_.
  
  On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
  To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
  
  
.. _envoy_api_field_Listener.traffic_direction:

traffic_direction
  (:ref:`core.TrafficDirection <envoy_api_enum_core.TrafficDirection>`) Specifies the intended direction of the traffic relative to the local Envoy.
  
  
.. _envoy_api_field_Listener.udp_listener_config:

udp_listener_config
  (:ref:`listener.UdpListenerConfig <envoy_api_msg_listener.UdpListenerConfig>`) If the protocol in the listener socket address in :ref:`protocol
  <envoy_api_field_core.SocketAddress.protocol>` is :ref:`UDP
  <envoy_api_enum_value_core.SocketAddress.Protocol.UDP>`, this field specifies the actual udp
  listener to create, i.e. :ref:`udp_listener_name
  <envoy_api_field_listener.UdpListenerConfig.udp_listener_name>` = "raw_udp_listener" for
  creating a packet-oriented UDP listener. If not present, treat it as "raw_udp_listener".
  
  
.. _envoy_api_field_Listener.api_listener:

api_listener
  (:ref:`config.listener.v2.ApiListener <envoy_api_msg_config.listener.v2.ApiListener>`) Used to represent an API listener, which is used in non-proxy clients. The type of API
  exposed to the non-proxy application depends on the type of API listener.
  When this field is set, no other field except for :ref:`name<envoy_api_field_Listener.name>`
  should be set.
  
  .. note::
  
   Currently only one ApiListener can be installed; and it can only be done via bootstrap config,
   not LDS.
  
  
  
.. _envoy_api_field_Listener.connection_balance_config:

connection_balance_config
  (:ref:`Listener.ConnectionBalanceConfig <envoy_api_msg_Listener.ConnectionBalanceConfig>`) The listener's connection balancer configuration, currently only applicable to TCP listeners.
  If no configuration is specified, Envoy will not attempt to balance active connections between
  worker threads.
  
  
.. _envoy_api_field_Listener.reuse_port:

reuse_port
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When this flag is set to true, listeners set the *SO_REUSEPORT* socket option and
  create one socket for each worker thread. This makes inbound connections
  distribute among worker threads roughly evenly in cases where there are a high number
  of connections. When this flag is set to false, all worker threads share one socket.
  
  Before Linux v4.19-rc1, new TCP connections may be rejected during hot restart
  (see `3rd paragraph in 'soreuseport' commit message
  <https://github.com/torvalds/linux/commit/c617f398edd4db2b8567a28e89>`_).
  This issue was fixed by `tcp: Avoid TCP syncookie rejected by SO_REUSEPORT socket
  <https://github.com/torvalds/linux/commit/40a1227ea845a37ab197dd1caffb60b047fa36b1>`_.
  
  
.. _envoy_api_field_Listener.access_log:

access_log
  (**repeated** :ref:`config.filter.accesslog.v2.AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`) Configuration for :ref:`access logs <arch_overview_access_logs>`
  emitted by this listener.
  
  

.. _envoy_api_msg_Listener.ConnectionBalanceConfig:

Listener.ConnectionBalanceConfig
--------------------------------

`[Listener.ConnectionBalanceConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/listener.proto#L58>`_

Configuration for listener connection balancing.

.. code-block:: json

  {
    "exact_balance": "{...}"
  }

.. _envoy_api_field_Listener.ConnectionBalanceConfig.exact_balance:

exact_balance
  (:ref:`Listener.ConnectionBalanceConfig.ExactBalance <envoy_api_msg_Listener.ConnectionBalanceConfig.ExactBalance>`, *REQUIRED*) If specified, the listener will use the exact connection balancer.
  
  
  
.. _envoy_api_msg_Listener.ConnectionBalanceConfig.ExactBalance:

Listener.ConnectionBalanceConfig.ExactBalance
---------------------------------------------

`[Listener.ConnectionBalanceConfig.ExactBalance proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/listener.proto#L65>`_

A connection balancer implementation that does exact balancing. This means that a lock is
held during balancing so that connection counts are nearly exactly balanced between worker
threads. This is "nearly" exact in the sense that a connection might close in parallel thus
making the counts incorrect, but this should be rectified on the next accept. This balancer
sacrifices accept throughput for accuracy and should be used when there are a small number of
connections that rarely cycle (e.g., service mesh gRPC egress).

.. code-block:: json

  {}





.. _envoy_api_enum_Listener.DrainType:

Enum Listener.DrainType
-----------------------

`[Listener.DrainType proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/listener.proto#L31>`_


.. _envoy_api_enum_value_Listener.DrainType.DEFAULT:

DEFAULT
  *(DEFAULT)* ⁣Drain in response to calling /healthcheck/fail admin endpoint (along with the health check
  filter), listener removal/modification, and hot restart.
  
  
.. _envoy_api_enum_value_Listener.DrainType.MODIFY_ONLY:

MODIFY_ONLY
  ⁣Drain in response to listener removal/modification and hot restart. This setting does not
  include /healthcheck/fail. This setting may be desirable if Envoy is hosting both ingress
  and egress listeners.
  
  
