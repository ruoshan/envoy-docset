.. _envoy_api_file_envoy/api/v2/core/config_source.proto:

Configuration sources
=====================


.. _envoy_api_msg_core.ApiConfigSource:

core.ApiConfigSource
--------------------

`[core.ApiConfigSource proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/core/config_source.proto#L40>`_

API configuration source. This identifies the API type and cluster that Envoy
will use to fetch an xDS API.

.. code-block:: json

  {
    "api_type": "...",
    "transport_api_version": "...",
    "cluster_names": [],
    "grpc_services": [],
    "refresh_delay": "{...}",
    "request_timeout": "{...}",
    "rate_limit_settings": "{...}",
    "set_node_on_first_message_only": "..."
  }

.. _envoy_api_field_core.ApiConfigSource.api_type:

api_type
  (:ref:`core.ApiConfigSource.ApiType <envoy_api_enum_core.ApiConfigSource.ApiType>`) API type (gRPC, REST, delta gRPC)
  
  
.. _envoy_api_field_core.ApiConfigSource.transport_api_version:

transport_api_version
  (:ref:`core.ApiVersion <envoy_api_enum_core.ApiVersion>`) API version for xDS transport protocol. This describes the xDS gRPC/REST
  endpoint and version of [Delta]DiscoveryRequest/Response used on the wire.
  
  
.. _envoy_api_field_core.ApiConfigSource.cluster_names:

cluster_names
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Cluster names should be used only with REST. If > 1
  cluster is defined, clusters will be cycled through if any kind of failure
  occurs.
  
  .. note::
  
   The cluster with name ``cluster_name`` must be statically defined and its
   type must not be ``EDS``.
  
  
.. _envoy_api_field_core.ApiConfigSource.grpc_services:

grpc_services
  (**repeated** :ref:`core.GrpcService <envoy_api_msg_core.GrpcService>`) Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,
  services will be cycled through if any kind of failure occurs.
  
  
.. _envoy_api_field_core.ApiConfigSource.refresh_delay:

refresh_delay
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) For REST APIs, the delay between successive polls.
  
  
.. _envoy_api_field_core.ApiConfigSource.request_timeout:

request_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) For REST APIs, the request timeout. If not set, a default value of 1s will be used.
  
  
.. _envoy_api_field_core.ApiConfigSource.rate_limit_settings:

rate_limit_settings
  (:ref:`core.RateLimitSettings <envoy_api_msg_core.RateLimitSettings>`) For GRPC APIs, the rate limit settings. If present, discovery requests made by Envoy will be
  rate limited.
  
  
.. _envoy_api_field_core.ApiConfigSource.set_node_on_first_message_only:

set_node_on_first_message_only
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Skip the node identifier in subsequent discovery requests for streaming gRPC config types.
  
  

.. _envoy_api_enum_core.ApiConfigSource.ApiType:

Enum core.ApiConfigSource.ApiType
---------------------------------

`[core.ApiConfigSource.ApiType proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/core/config_source.proto#L42>`_

APIs may be fetched via either REST or gRPC.

.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.UNSUPPORTED_REST_LEGACY:

UNSUPPORTED_REST_LEGACY
  *(DEFAULT)* ⁣Ideally this would be 'reserved 0' but one can't reserve the default
  value. Instead we throw an exception if this is ever used.
  
  
.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.REST:

REST
  ⁣REST-JSON v2 API. The `canonical JSON encoding
  <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
  the v2 protos is used.
  
  
.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC:

GRPC
  ⁣gRPC v2 API.
  
  
.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.DELTA_GRPC:

DELTA_GRPC
  ⁣Using the delta xDS gRPC service, i.e. DeltaDiscovery{Request,Response}
  rather than Discovery{Request,Response}. Rather than sending Envoy the entire state
  with every update, the xDS server only sends what has changed since the last update.
  
  

.. _envoy_api_msg_core.AggregatedConfigSource:

core.AggregatedConfigSource
---------------------------

`[core.AggregatedConfigSource proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/core/config_source.proto#L100>`_

Aggregated Discovery Service (ADS) options. This is currently empty, but when
set in :ref:`ConfigSource <envoy_api_msg_core.ConfigSource>` can be used to
specify that ADS is to be used.

.. code-block:: json

  {}





.. _envoy_api_msg_core.RateLimitSettings:

core.RateLimitSettings
----------------------

`[core.RateLimitSettings proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/core/config_source.proto#L114>`_

Rate Limit settings to be applied for discovery requests made by Envoy.

.. code-block:: json

  {
    "max_tokens": "{...}",
    "fill_rate": "{...}"
  }

.. _envoy_api_field_core.RateLimitSettings.max_tokens:

max_tokens
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Maximum number of tokens to be used for rate limiting discovery request calls. If not set, a
  default value of 100 will be used.
  
  
.. _envoy_api_field_core.RateLimitSettings.fill_rate:

fill_rate
  (`DoubleValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#doublevalue>`_) Rate at which tokens will be filled per second. If not set, a default fill rate of 10 tokens
  per second will be used.
  
  


.. _envoy_api_msg_core.ConfigSource:

core.ConfigSource
-----------------

`[core.ConfigSource proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/core/config_source.proto#L131>`_

Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
<config_cluster_manager>`, :ref:`routes
<envoy_api_msg_RouteConfiguration>`, :ref:`endpoints
<arch_overview_service_discovery>` etc. may either be sourced from the
filesystem or from an xDS API source. Filesystem configs are watched with
inotify for updates.

.. code-block:: json

  {
    "path": "...",
    "api_config_source": "{...}",
    "ads": "{...}",
    "initial_fetch_timeout": "{...}",
    "resource_api_version": "..."
  }

.. _envoy_api_field_core.ConfigSource.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Path on the filesystem to source and watch for configuration updates.
  When sourcing configuration for :ref:`secret <envoy_api_msg_auth.Secret>`,
  the certificate and key files are also watched for updates.
  
  .. note::
  
   The path to the source must exist at config load time.
  
  .. note::
  
    Envoy will only watch the file path for *moves.* This is because in general only moves
    are atomic. The same method of swapping files as is demonstrated in the
    :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be used here also.
  
  
  
  Precisely one of :ref:`path <envoy_api_field_core.ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_core.ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_core.ConfigSource.ads>` must be set.
  
.. _envoy_api_field_core.ConfigSource.api_config_source:

api_config_source
  (:ref:`core.ApiConfigSource <envoy_api_msg_core.ApiConfigSource>`) API configuration source.
  
  
  
  Precisely one of :ref:`path <envoy_api_field_core.ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_core.ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_core.ConfigSource.ads>` must be set.
  
.. _envoy_api_field_core.ConfigSource.ads:

ads
  (:ref:`core.AggregatedConfigSource <envoy_api_msg_core.AggregatedConfigSource>`) When set, ADS will be used to fetch resources. The ADS API configuration
  source in the bootstrap configuration is used.
  
  
  
  Precisely one of :ref:`path <envoy_api_field_core.ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_core.ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_core.ConfigSource.ads>` must be set.
  

.. _envoy_api_field_core.ConfigSource.initial_fetch_timeout:

initial_fetch_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) When this timeout is specified, Envoy will wait no longer than the specified time for first
  config response on this xDS subscription during the :ref:`initialization process
  <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next
  initialization phase, even if the first config is not delivered yet. The timer is activated
  when the xDS API subscription starts, and is disarmed on first config update or on error. 0
  means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
  timeout applies). The default is 15s.
  
  
.. _envoy_api_field_core.ConfigSource.resource_api_version:

resource_api_version
  (:ref:`core.ApiVersion <envoy_api_enum_core.ApiVersion>`) API version for xDS resources. This implies the type URLs that the client
  will request for resources and the resource type that the client will in
  turn expect to be delivered.
  
  

.. _envoy_api_enum_core.ApiVersion:

Enum core.ApiVersion
--------------------

`[core.ApiVersion proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/api/v2/core/config_source.proto#L24>`_

xDS API version. This is used to describe both resource and transport
protocol versions (in distinct configuration fields).

.. _envoy_api_enum_value_core.ApiVersion.AUTO:

AUTO
  *(DEFAULT)* ⁣When not specified, we assume v2, to ease migration to Envoy's stable API
  versioning. If a client does not support v2 (e.g. due to deprecation), this
  is an invalid value.
  
  
.. _envoy_api_enum_value_core.ApiVersion.V2:

V2
  ⁣Use xDS v2 API.
  
  
.. _envoy_api_enum_value_core.ApiVersion.V3:

V3
  ⁣Use xDS v3 API.
  
  
