.. _envoy_v3_api_file_envoy/config/core/v3/socket_option.proto:

Socket Option 
==============


.. _envoy_v3_api_msg_config.core.v3.SocketOption:

config.core.v3.SocketOption
---------------------------

`[config.core.v3.SocketOption proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/config/core/v3/socket_option.proto#L18>`_

Generic socket option message. This would be used to set socket options that
might not exist in upstream kernels or precompiled Envoy binaries.

.. code-block:: json

  {
    "description": "...",
    "level": "...",
    "name": "...",
    "int_value": "...",
    "buf_value": "...",
    "state": "..."
  }

.. _envoy_v3_api_field_config.core.v3.SocketOption.description:

description
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional name to give this socket option for debugging, etc.
  Uniqueness is not required and no special meaning is assumed.
  
  
.. _envoy_v3_api_field_config.core.v3.SocketOption.level:

level
  (`int64 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP
  
  
.. _envoy_v3_api_field_config.core.v3.SocketOption.name:

name
  (`int64 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The numeric name as passed to setsockopt
  
  
.. _envoy_v3_api_field_config.core.v3.SocketOption.int_value:

int_value
  (`int64 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Because many sockopts take an int value.
  
  
  
  Precisely one of :ref:`int_value <envoy_v3_api_field_config.core.v3.SocketOption.int_value>`, :ref:`buf_value <envoy_v3_api_field_config.core.v3.SocketOption.buf_value>` must be set.
  
.. _envoy_v3_api_field_config.core.v3.SocketOption.buf_value:

buf_value
  (`bytes <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Otherwise it's a byte buffer.
  
  
  
  Precisely one of :ref:`int_value <envoy_v3_api_field_config.core.v3.SocketOption.int_value>`, :ref:`buf_value <envoy_v3_api_field_config.core.v3.SocketOption.buf_value>` must be set.
  
.. _envoy_v3_api_field_config.core.v3.SocketOption.state:

state
  (:ref:`config.core.v3.SocketOption.SocketState <envoy_v3_api_enum_config.core.v3.SocketOption.SocketState>`) The state in which the option will be applied. When used in BindConfig
  STATE_PREBIND is currently the only valid value.
  
  

.. _envoy_v3_api_enum_config.core.v3.SocketOption.SocketState:

Enum config.core.v3.SocketOption.SocketState
--------------------------------------------

`[config.core.v3.SocketOption.SocketState proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/config/core/v3/socket_option.proto#L21>`_


.. _envoy_v3_api_enum_value_config.core.v3.SocketOption.SocketState.STATE_PREBIND:

STATE_PREBIND
  *(DEFAULT)* ⁣Socket options are applied after socket creation but before binding the socket to a port
  
  
.. _envoy_v3_api_enum_value_config.core.v3.SocketOption.SocketState.STATE_BOUND:

STATE_BOUND
  ⁣Socket options are applied after binding the socket to a port but before calling listen()
  
  
.. _envoy_v3_api_enum_value_config.core.v3.SocketOption.SocketState.STATE_LISTENING:

STATE_LISTENING
  ⁣Socket options are applied after calling listen()
  
  
