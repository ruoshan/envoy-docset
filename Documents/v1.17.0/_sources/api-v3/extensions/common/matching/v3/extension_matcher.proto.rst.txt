.. _envoy_v3_api_file_envoy/extensions/common/matching/v3/extension_matcher.proto:

Extension Matcher
=================


.. _envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher:

extensions.common.matching.v3.ExtensionWithMatcher
--------------------------------------------------

`[extensions.common.matching.v3.ExtensionWithMatcher proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/common/matching/v3/extension_matcher.proto#L21>`_

Wrapper around an existing extension that provides an associated matcher. This allows
decorating an existing extension with a matcher, which can be used to match against
relevant protocol data.

.. code-block:: json

  {
    "matcher": "{...}",
    "extension_config": "{...}"
  }

.. _envoy_v3_api_field_extensions.common.matching.v3.ExtensionWithMatcher.matcher:

matcher
  (:ref:`config.common.matcher.v3.Matcher <envoy_v3_api_msg_config.common.matcher.v3.Matcher>`, *REQUIRED*) The associated matcher.
  
  
.. _envoy_v3_api_field_extensions.common.matching.v3.ExtensionWithMatcher.extension_config:

extension_config
  (:ref:`config.core.v3.TypedExtensionConfig <envoy_v3_api_msg_config.core.v3.TypedExtensionConfig>`, *REQUIRED*) The underlying extension config.
  
  

