.. _envoy_v3_api_file_envoy/extensions/common/ratelimit/v3/ratelimit.proto:

Common rate limit components
============================


.. _envoy_v3_api_msg_extensions.common.ratelimit.v3.RateLimitDescriptor:

extensions.common.ratelimit.v3.RateLimitDescriptor
--------------------------------------------------

`[extensions.common.ratelimit.v3.RateLimitDescriptor proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/common/ratelimit/v3/ratelimit.proto#L62>`_

A RateLimitDescriptor is a list of hierarchical entries that are used by the service to
determine the final rate limit key and overall allowed limit. Here are some examples of how
they might be used for the domain "envoy".

.. code-block:: cpp

  ["authenticated": "false"], ["remote_address": "10.0.0.1"]

What it does: Limits all unauthenticated traffic for the IP address 10.0.0.1. The
configuration supplies a default limit for the *remote_address* key. If there is a desire to
raise the limit for 10.0.0.1 or block it entirely it can be specified directly in the
configuration.

.. code-block:: cpp

  ["authenticated": "false"], ["path": "/foo/bar"]

What it does: Limits all unauthenticated traffic globally for a specific path (or prefix if
configured that way in the service).

.. code-block:: cpp

  ["authenticated": "false"], ["path": "/foo/bar"], ["remote_address": "10.0.0.1"]

What it does: Limits unauthenticated traffic to a specific path for a specific IP address.
Like (1) we can raise/block specific IP addresses if we want with an override configuration.

.. code-block:: cpp

  ["authenticated": "true"], ["client_id": "foo"]

What it does: Limits all traffic for an authenticated client "foo"

.. code-block:: cpp

  ["authenticated": "true"], ["client_id": "foo"], ["path": "/foo/bar"]

What it does: Limits traffic to a specific path for an authenticated client "foo"

The idea behind the API is that (1)/(2)/(3) and (4)/(5) can be sent in 1 request if desired.
This enables building complex application scenarios with a generic backend.

Optionally the descriptor can contain a limit override under a "limit" key, that specifies
the number of requests per unit to use instead of the number configured in the
rate limiting service.

.. code-block:: json

  {
    "entries": [],
    "limit": "{...}"
  }

.. _envoy_v3_api_field_extensions.common.ratelimit.v3.RateLimitDescriptor.entries:

entries
  (**repeated** :ref:`extensions.common.ratelimit.v3.RateLimitDescriptor.Entry <envoy_v3_api_msg_extensions.common.ratelimit.v3.RateLimitDescriptor.Entry>`, *REQUIRED*) Descriptor entries.
  
  
.. _envoy_v3_api_field_extensions.common.ratelimit.v3.RateLimitDescriptor.limit:

limit
  (:ref:`extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride <envoy_v3_api_msg_extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride>`) Optional rate limit override to supply to the ratelimit service.
  
  
.. _envoy_v3_api_msg_extensions.common.ratelimit.v3.RateLimitDescriptor.Entry:

extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
--------------------------------------------------------

`[extensions.common.ratelimit.v3.RateLimitDescriptor.Entry proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/common/ratelimit/v3/ratelimit.proto#L66>`_


.. code-block:: json

  {
    "key": "...",
    "value": "..."
  }

.. _envoy_v3_api_field_extensions.common.ratelimit.v3.RateLimitDescriptor.Entry.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Descriptor key.
  
  
.. _envoy_v3_api_field_extensions.common.ratelimit.v3.RateLimitDescriptor.Entry.value:

value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Descriptor value.
  
  


.. _envoy_v3_api_msg_extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride:

extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride
--------------------------------------------------------------------

`[extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/common/ratelimit/v3/ratelimit.proto#L80>`_

Override rate limit to apply to this descriptor instead of the limit
configured in the rate limit service. See :ref:`rate limit override
<config_http_filters_rate_limit_rate_limit_override>` for more information.

.. code-block:: json

  {
    "requests_per_unit": "...",
    "unit": "..."
  }

.. _envoy_v3_api_field_extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride.requests_per_unit:

requests_per_unit
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The number of requests per unit of time.
  
  
.. _envoy_v3_api_field_extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride.unit:

unit
  (:ref:`type.v3.RateLimitUnit <envoy_v3_api_enum_type.v3.RateLimitUnit>`) The unit of time.
  
  


