.. _envoy_v3_api_file_envoy/extensions/access_loggers/grpc/v3/als.proto:

gRPC Access Log Service (ALS)
=============================


.. _envoy_v3_api_msg_extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig:

extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
---------------------------------------------------------

`[extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/access_loggers/grpc/v3/als.proto#L26>`_

Configuration for the built-in *envoy.access_loggers.http_grpc*
:ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
populate :ref:`StreamAccessLogsMessage.http_logs
<envoy_v3_api_field_service.accesslog.v3.StreamAccessLogsMessage.http_logs>`.

.. _extension_envoy.access_loggers.http_grpc:


This extension may be referenced by the qualified name *envoy.access_loggers.http_grpc*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

.. code-block:: json

  {
    "common_config": "{...}",
    "additional_request_headers_to_log": [],
    "additional_response_headers_to_log": [],
    "additional_response_trailers_to_log": []
  }

.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig.common_config:

common_config
  (:ref:`extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig>`, *REQUIRED*) 
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig.additional_request_headers_to_log:

additional_request_headers_to_log
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Additional request headers to log in :ref:`HTTPRequestProperties.request_headers
  <envoy_v3_api_field_data.accesslog.v3.HTTPRequestProperties.request_headers>`.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig.additional_response_headers_to_log:

additional_response_headers_to_log
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Additional response headers to log in :ref:`HTTPResponseProperties.response_headers
  <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_headers>`.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig.additional_response_trailers_to_log:

additional_response_trailers_to_log
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Additional response trailers to log in :ref:`HTTPResponseProperties.response_trailers
  <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_trailers>`.
  
  


.. _envoy_v3_api_msg_extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig:

extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig
--------------------------------------------------------

`[extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/access_loggers/grpc/v3/als.proto#L48>`_

Configuration for the built-in *envoy.access_loggers.tcp_grpc* type. This configuration will
populate *StreamAccessLogsMessage.tcp_logs*.

.. _extension_envoy.access_loggers.tcp_grpc:


This extension may be referenced by the qualified name *envoy.access_loggers.tcp_grpc*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

.. code-block:: json

  {
    "common_config": "{...}"
  }

.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig.common_config:

common_config
  (:ref:`extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig>`, *REQUIRED*) 
  


.. _envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig:

extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig
-----------------------------------------------------------

`[extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/access_loggers/grpc/v3/als.proto#L57>`_

Common configuration for gRPC access logs.

.. code-block:: json

  {
    "log_name": "...",
    "grpc_service": "{...}",
    "transport_api_version": "...",
    "buffer_flush_interval": "{...}",
    "buffer_size_bytes": "{...}",
    "filter_state_objects_to_log": []
  }

.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.log_name:

log_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The friendly name of the access log to be returned in :ref:`StreamAccessLogsMessage.Identifier
  <envoy_v3_api_msg_service.accesslog.v3.StreamAccessLogsMessage.Identifier>`. This allows the
  access log server to differentiate between different access logs coming from the same Envoy.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.grpc_service:

grpc_service
  (:ref:`config.core.v3.GrpcService <envoy_v3_api_msg_config.core.v3.GrpcService>`, *REQUIRED*) The gRPC service for the access log service.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.transport_api_version:

transport_api_version
  (:ref:`config.core.v3.ApiVersion <envoy_v3_api_enum_config.core.v3.ApiVersion>`) API version for access logs service transport protocol. This describes the access logs service
  gRPC endpoint and version of messages used on the wire.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.buffer_flush_interval:

buffer_flush_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Interval for flushing access logs to the gRPC stream. Logger will flush requests every time
  this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
  1 second.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.buffer_size_bytes:

buffer_size_bytes
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Soft size limit in bytes for access log entries buffer. Logger will buffer requests until
  this limit it hit, or every time flush interval is elapsed, whichever comes first. Setting it
  to zero effectively disables the batching. Defaults to 16384.
  
  
.. _envoy_v3_api_field_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.filter_state_objects_to_log:

filter_state_objects_to_log
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Additional filter state objects to log in :ref:`filter_state_objects
  <envoy_v3_api_field_data.accesslog.v3.AccessLogCommon.filter_state_objects>`.
  Logger will call `FilterState::Object::serializeAsProto` to serialize the filter state object.
  
  

