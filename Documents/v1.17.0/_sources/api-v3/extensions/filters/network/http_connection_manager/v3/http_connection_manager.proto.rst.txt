.. _envoy_v3_api_file_envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto:

HTTP connection manager
=======================

.. _extension_envoy.filters.network.http_connection_manager:


This extension may be referenced by the qualified name *envoy.filters.network.http_connection_manager*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

HTTP connection manager :ref:`configuration overview <config_http_conn_man>`.

.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager:

extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
---------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L38>`_


.. code-block:: json

  {
    "codec_type": "...",
    "stat_prefix": "...",
    "rds": "{...}",
    "route_config": "{...}",
    "scoped_routes": "{...}",
    "http_filters": [],
    "add_user_agent": "{...}",
    "tracing": "{...}",
    "common_http_protocol_options": "{...}",
    "http_protocol_options": "{...}",
    "http2_protocol_options": "{...}",
    "server_name": "...",
    "server_header_transformation": "...",
    "max_request_headers_kb": "{...}",
    "stream_idle_timeout": "{...}",
    "request_timeout": "{...}",
    "request_headers_timeout": "{...}",
    "drain_timeout": "{...}",
    "delayed_close_timeout": "{...}",
    "access_log": [],
    "use_remote_address": "{...}",
    "xff_num_trusted_hops": "...",
    "internal_address_config": "{...}",
    "skip_xff_append": "...",
    "via": "...",
    "generate_request_id": "{...}",
    "preserve_external_request_id": "...",
    "always_set_request_id_in_response": "...",
    "forward_client_cert_details": "...",
    "set_current_client_cert_details": "{...}",
    "proxy_100_continue": "...",
    "upgrade_configs": [],
    "normalize_path": "{...}",
    "merge_slashes": "...",
    "request_id_extension": "{...}",
    "local_reply_config": "{...}",
    "strip_matching_host_port": "...",
    "strip_any_host_port": "...",
    "stream_error_on_invalid_http_message": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type:

codec_type
  (:ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType <envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType>`) Supplies the type of codec that the connection manager should use.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The human readable prefix to use when emitting statistics for the
  connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
  more information.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds:

rds
  (:ref:`extensions.filters.network.http_connection_manager.v3.Rds <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds>`) The connection manager’s route table will be dynamically loaded via the RDS API.
  
  
  
  Precisely one of :ref:`rds <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds>`, :ref:`route_config <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config>`, :ref:`scoped_routes <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.scoped_routes>` must be set.
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config:

route_config
  (:ref:`config.route.v3.RouteConfiguration <envoy_v3_api_msg_config.route.v3.RouteConfiguration>`) The route table for the connection manager is static and is specified in this property.
  
  
  
  Precisely one of :ref:`rds <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds>`, :ref:`route_config <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config>`, :ref:`scoped_routes <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.scoped_routes>` must be set.
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.scoped_routes:

scoped_routes
  (:ref:`extensions.filters.network.http_connection_manager.v3.ScopedRoutes <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes>`) A route table will be dynamically assigned to each request based on request attributes
  (e.g., the value of a header). The "routing scopes" (i.e., route tables) and "scope keys" are
  specified in this message.
  
  
  
  Precisely one of :ref:`rds <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds>`, :ref:`route_config <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config>`, :ref:`scoped_routes <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.scoped_routes>` must be set.
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.http_filters:

http_filters
  (**repeated** :ref:`extensions.filters.network.http_connection_manager.v3.HttpFilter <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpFilter>`) A list of individual HTTP filters that make up the filter chain for
  requests made to the connection manager. :ref:`Order matters <arch_overview_http_filters_ordering>`
  as the filters are processed sequentially as request events happen.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent:

add_user_agent
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
  and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
  documentation for more information. Defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.tracing:

tracing
  (:ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing>`) Presence of the object defines whether the connection manager
  emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
  <envoy_v3_api_msg_config.trace.v3.Tracing>`.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.common_http_protocol_options:

common_http_protocol_options
  (:ref:`config.core.v3.HttpProtocolOptions <envoy_v3_api_msg_config.core.v3.HttpProtocolOptions>`) Additional settings for HTTP requests handled by the connection manager. These will be
  applicable to both HTTP1 and HTTP2 requests.
  
  .. attention::
    This field should be configured in the presence of untrusted *downstreams*.

    Example configuration for untrusted environments:

    .. code-block:: yaml

      common_http_protocol_options:
        headers_with_underscores_action: REJECT_REQUEST
        idle_timeout: 900s
      
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.http_protocol_options:

http_protocol_options
  (:ref:`config.core.v3.Http1ProtocolOptions <envoy_v3_api_msg_config.core.v3.Http1ProtocolOptions>`) Additional HTTP/1 settings that are passed to the HTTP/1 codec.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.http2_protocol_options:

http2_protocol_options
  (:ref:`config.core.v3.Http2ProtocolOptions <envoy_v3_api_msg_config.core.v3.Http2ProtocolOptions>`) Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
  
  .. attention::
    This field should be configured in the presence of untrusted *downstreams*.

    Example configuration for untrusted environments:

    .. code-block:: yaml

      http2_protocol_options:
        initial_connection_window_size: 1048576.0
        initial_stream_window_size: 65536.0
        max_concurrent_streams: 100.0
      
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.server_name:

server_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional override that the connection manager will write to the server
  header in responses. If not set, the default is *envoy*.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.server_header_transformation:

server_header_transformation
  (:ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation <envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation>`) Defines the action to be applied to the Server header on the response path.
  By default, Envoy will overwrite the header with the value specified in
  server_name.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.max_request_headers_kb:

max_request_headers_kb
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The maximum request headers size for incoming connections.
  If unconfigured, the default max request headers allowed is 60 KiB.
  Requests that exceed this limit will receive a 431 response.
  The max configurable limit is 96 KiB, based on current implementation
  constraints.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout:

stream_idle_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The stream idle timeout for connections managed by the connection manager.
  If not specified, this defaults to 5 minutes. The default value was selected
  so as not to interfere with any smaller configured timeouts that may have
  existed in configurations prior to the introduction of this feature, while
  introducing robustness to TCP connections that terminate without a FIN.
  
  This idle timeout applies to new streams and is overridable by the
  :ref:`route-level idle_timeout
  <envoy_v3_api_field_config.route.v3.RouteAction.idle_timeout>`. Even on a stream in
  which the override applies, prior to receipt of the initial request
  headers, the :ref:`stream_idle_timeout
  <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
  applies. Each time an encode/decode event for headers or data is processed
  for the stream, the timer will be reset. If the timeout fires, the stream
  is terminated with a 408 Request Timeout error code if no upstream response
  header has been received, otherwise a stream reset occurs.
  
  This timeout also specifies the amount of time that Envoy will wait for the peer to open enough
  window to write any remaining stream data once the entirety of stream data (local end stream is
  true) has been buffered pending available window. In other words, this timeout defends against
  a peer that does not release enough window to completely write the stream, even though all
  data has been proxied within available flow control windows. If the timeout is hit in this
  case, the :ref:`tx_flush_timeout <config_http_conn_man_stats_per_codec>` counter will be
  incremented. Note that :ref:`max_stream_duration
  <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.max_stream_duration>` does not apply to
  this corner case.
  
  If the :ref:`overload action <config_overload_manager_overload_actions>` "envoy.overload_actions.reduce_timeouts"
  is configured, this timeout is scaled according to the value for
  :ref:`HTTP_DOWNSTREAM_STREAM_IDLE <envoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_STREAM_IDLE>`.
  
  Note that it is possible to idle timeout even if the wire traffic for a stream is non-idle, due
  to the granularity of events presented to the connection manager. For example, while receiving
  very large request headers, it may be the case that there is traffic regularly arriving on the
  wire while the connection manage is only able to observe the end-of-headers event, hence the
  stream may still idle timeout.
  
  A value of 0 will completely disable the connection manager stream idle
  timeout, although per-route idle timeout overrides will continue to apply.
  
  .. attention::
    This field should be configured in the presence of untrusted *downstreams*.

    Example configuration for untrusted environments:

    .. code-block:: yaml

      stream_idle_timeout: 300s
      
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.request_timeout:

request_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The amount of time that Envoy will wait for the entire request to be received.
  The timer is activated when the request is initiated, and is disarmed when the last byte of the
  request is sent upstream (i.e. all decoding filters have processed the request), OR when the
  response is initiated. If not specified or set to 0, this timeout is disabled.
  
  .. attention::
    This field should be configured in the presence of untrusted *downstreams*.

    This timeout is not compatible with streaming requests.


    Example configuration for untrusted environments:

    .. code-block:: yaml

      request_timeout: 300s
      
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.request_headers_timeout:

request_headers_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The amount of time that Envoy will wait for the request headers to be received. The timer is
  activated when the first byte of the headers is received, and is disarmed when the last byte of
  the headers has been received. If not specified or set to 0, this timeout is disabled.
  
  .. attention::
    This field should be configured in the presence of untrusted *downstreams*.

    Example configuration for untrusted environments:

    .. code-block:: yaml

      request_headers_timeout: 10s
      
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout:

drain_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The time that Envoy will wait between sending an HTTP/2 “shutdown
  notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
  This is used so that Envoy provides a grace period for new streams that
  race with the final GOAWAY frame. During this grace period, Envoy will
  continue to accept new streams. After the grace period, a final GOAWAY
  frame is sent and Envoy will start refusing new streams. Draining occurs
  both when a connection hits the idle timeout or during general server
  draining. The default grace period is 5000 milliseconds (5 seconds) if this
  option is not specified.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.delayed_close_timeout:

delayed_close_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The delayed close timeout is for downstream connections managed by the HTTP connection manager.
  It is defined as a grace period after connection close processing has been locally initiated
  during which Envoy will wait for the peer to close (i.e., a TCP FIN/RST is received by Envoy
  from the downstream connection) prior to Envoy closing the socket associated with that
  connection.
  NOTE: This timeout is enforced even when the socket associated with the downstream connection
  is pending a flush of the write buffer. However, any progress made writing data to the socket
  will restart the timer associated with this timeout. This means that the total grace period for
  a socket in this state will be
  <total_time_waiting_for_write_buffer_flushes>+<delayed_close_timeout>.
  
  Delaying Envoy's connection close and giving the peer the opportunity to initiate the close
  sequence mitigates a race condition that exists when downstream clients do not drain/process
  data in a connection's receive buffer after a remote close has been detected via a socket
  write(). This race leads to such clients failing to process the response code sent by Envoy,
  which could result in erroneous downstream processing.
  
  If the timeout triggers, Envoy will close the connection's socket.
  
  The default timeout is 1000 ms if this option is not specified.
  
  .. NOTE::
     To be useful in avoiding the race condition described above, this timeout must be set
     to *at least* <max round trip time expected between clients and Envoy>+<100ms to account for
     a reasonable "worst" case processing time for a full iteration of Envoy's event loop>.
  
  .. WARNING::
     A value of 0 will completely disable delayed close processing. When disabled, the downstream
     connection's socket will be closed immediately after the write flush is completed or will
     never close if the write flush does not complete.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.access_log:

access_log
  (**repeated** :ref:`config.accesslog.v3.AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`) Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
  emitted by the connection manager.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address:

use_remote_address
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) If set to true, the connection manager will use the real remote address
  of the client connection when determining internal versus external origin and manipulating
  various headers. If set to false or absent, the connection manager will use the
  :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
  :ref:`config_http_conn_man_headers_x-forwarded-for`,
  :ref:`config_http_conn_man_headers_x-envoy-internal`, and
  :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
  
  .. attention::
    This field should be configured in the presence of untrusted *downstreams*.

    Example configuration for untrusted environments:

    .. code-block:: yaml

      use_remote_address: true
      
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.xff_num_trusted_hops:

xff_num_trusted_hops
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The number of additional ingress proxy hops from the right side of the
  :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
  determining the origin client's IP address. The default is zero if this option
  is not specified. See the documentation for
  :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.internal_address_config:

internal_address_config
  (:ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig>`) Configures what network addresses are considered internal for stats and header sanitation
  purposes. If unspecified, only RFC1918 IP addresses will be considered internal.
  See the documentation for :ref:`config_http_conn_man_headers_x-envoy-internal` for more
  information about internal/external addresses.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.skip_xff_append:

skip_xff_append
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If set, Envoy will not append the remote address to the
  :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. This may be used in
  conjunction with HTTP filters that explicitly manipulate XFF after the HTTP connection manager
  has mutated the request headers. While :ref:`use_remote_address
  <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address>`
  will also suppress XFF addition, it has consequences for logging and other
  Envoy uses of the remote address, so *skip_xff_append* should be used
  when only an elision of XFF addition is intended.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.via:

via
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Via header value to append to request and response headers. If this is
  empty, no via header will be appended.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.generate_request_id:

generate_request_id
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the connection manager will generate the :ref:`x-request-id
  <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to
  true. Generating a random UUID4 is expensive so in high throughput scenarios where this feature
  is not desired it can be disabled.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.preserve_external_request_id:

preserve_external_request_id
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether the connection manager will keep the :ref:`x-request-id
  <config_http_conn_man_headers_x-request-id>` header if passed for a request that is edge
  (Edge request is the request from external clients to front Envoy) and not reset it, which
  is the current Envoy behaviour. This defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.always_set_request_id_in_response:

always_set_request_id_in_response
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If set, Envoy will always set :ref:`x-request-id <config_http_conn_man_headers_x-request-id>` header in response.
  If this is false or not set, the request ID is returned in responses only if tracing is forced using
  :ref:`x-envoy-force-trace <config_http_conn_man_headers_x-envoy-force-trace>` header.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.forward_client_cert_details:

forward_client_cert_details
  (:ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails <envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails>`) How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
  header.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.set_current_client_cert_details:

set_current_client_cert_details
  (:ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails>`) This field is valid only when :ref:`forward_client_cert_details
  <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.forward_client_cert_details>`
  is APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
  the client certificate to be forwarded. Note that in the
  :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, *Hash* is always set, and
  *By* is always set when the client certificate presents the URI type Subject Alternative Name
  value.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.proxy_100_continue:

proxy_100_continue
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If proxy_100_continue is true, Envoy will proxy incoming "Expect:
  100-continue" headers upstream, and forward "100 Continue" responses
  downstream. If this is false or not set, Envoy will instead strip the
  "Expect: 100-continue" header, and send a "100 Continue" response itself.
  
  

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.upgrade_configs:

upgrade_configs
  (**repeated** :ref:`extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig>`) 
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.normalize_path:

normalize_path
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Should paths be normalized according to RFC 3986 before any processing of
  requests by HTTP filters or routing? This affects the upstream *:path* header
  as well. For paths that fail this check, Envoy will respond with 400 to
  paths that are malformed. This defaults to false currently but will default
  true in the future. When not specified, this value may be overridden by the
  runtime variable
  :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
  See `Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6>`_
  for details of normalization.
  Note that Envoy does not perform
  `case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.merge_slashes:

merge_slashes
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Determines if adjacent slashes in the path are merged into one before any processing of
  requests by HTTP filters or routing. This affects the upstream *:path* header as well. Without
  setting this option, incoming requests with path `//dir///file` will not match against route
  with `prefix` match set to `/dir`. Defaults to `false`. Note that slash merging is not part of
  `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.request_id_extension:

request_id_extension
  (:ref:`extensions.filters.network.http_connection_manager.v3.RequestIDExtension <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.RequestIDExtension>`) The configuration of the request ID extension. This includes operations such as
  generation, validation, and associated tracing operations.
  
  If not set, Envoy uses the default UUID-based behavior:
  
  1. Request ID is propagated using *x-request-id* header.
  
  2. Request ID is a universally unique identifier (UUID).
  
  3. Tracing decision (sampled, forced, etc) is set in 14th byte of the UUID.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.local_reply_config:

local_reply_config
  (:ref:`extensions.filters.network.http_connection_manager.v3.LocalReplyConfig <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig>`) The configuration to customize local reply returned by Envoy. It can customize status code,
  body text and response content type. If not specified, status code and text body are hard
  coded in Envoy, the response content type is plain text.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.strip_matching_host_port:

strip_matching_host_port
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Determines if the port part should be removed from host/authority header before any processing
  of request by HTTP filters or routing. The port would be removed only if it is equal to the :ref:`listener's<envoy_v3_api_field_config.listener.v3.Listener.address>`
  local port and request method is not CONNECT. This affects the upstream host header as well.
  Without setting this option, incoming requests with host `example:443` will not match against
  route with :ref:`domains<envoy_v3_api_field_config.route.v3.VirtualHost.domains>` match set to `example`. Defaults to `false`. Note that port removal is not part
  of `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
  Only one of `strip_matching_host_port` or `strip_any_host_port` can be set.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.strip_any_host_port:

strip_any_host_port
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Determines if the port part should be removed from host/authority header before any processing
  of request by HTTP filters or routing. The port would be removed only if request method is not CONNECT.
  This affects the upstream host header as well.
  Without setting this option, incoming requests with host `example:443` will not match against
  route with :ref:`domains<envoy_v3_api_field_config.route.v3.VirtualHost.domains>` match set to `example`. Defaults to `false`. Note that port removal is not part
  of `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
  Only one of `strip_matching_host_port` or `strip_any_host_port` can be set.
  
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message:

stream_error_on_invalid_http_message
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Governs Envoy's behavior when receiving invalid HTTP from downstream.
  If this option is false (default), Envoy will err on the conservative side handling HTTP
  errors, terminating both HTTP/1.1 and HTTP/2 connections when receiving an invalid request.
  If this option is set to true, Envoy will be more permissive, only resetting the invalid
  stream in the case of HTTP/2 and leaving the connection open where possible (if the entire
  request is read for HTTP/1.1)
  In general this should be true for deployments receiving trusted traffic (L2 Envoys,
  company-internal mesh) and false when receiving untrusted traffic (edge deployments).
  
  If different behaviors for invalid_http_message for HTTP/1 and HTTP/2 are
  desired, one should use the new HTTP/1 option :ref:`override_stream_error_on_invalid_http_message
  <envoy_v3_api_field_config.core.v3.Http1ProtocolOptions.override_stream_error_on_invalid_http_message>` or the new HTTP/2 option
  :ref:`override_stream_error_on_invalid_http_message
  <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message>`
  *not* the deprecated but similarly named :ref:`stream_error_on_invalid_http_messaging
  <envoy_v3_api_field_config.core.v3.Http2ProtocolOptions.stream_error_on_invalid_http_messaging>`
  
  
.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing:

extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing
-----------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L101>`_


.. code-block:: json

  {
    "client_sampling": "{...}",
    "random_sampling": "{...}",
    "overall_sampling": "{...}",
    "verbose": "...",
    "max_path_tag_length": "{...}",
    "custom_tags": [],
    "provider": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.client_sampling:

client_sampling
  (:ref:`type.v3.Percent <envoy_v3_api_msg_type.v3.Percent>`) Target percentage of requests managed by this HTTP connection manager that will be force
  traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
  header is set. This field is a direct analog for the runtime variable
  'tracing.client_sampling' in the :ref:`HTTP Connection Manager
  <config_http_conn_man_runtime>`.
  Default: 100%
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.random_sampling:

random_sampling
  (:ref:`type.v3.Percent <envoy_v3_api_msg_type.v3.Percent>`) Target percentage of requests managed by this HTTP connection manager that will be randomly
  selected for trace generation, if not requested by the client or not forced. This field is
  a direct analog for the runtime variable 'tracing.random_sampling' in the
  :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
  Default: 100%
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.overall_sampling:

overall_sampling
  (:ref:`type.v3.Percent <envoy_v3_api_msg_type.v3.Percent>`) Target percentage of requests managed by this HTTP connection manager that will be traced
  after all other sampling checks have been applied (client-directed, force tracing, random
  sampling). This field functions as an upper limit on the total configured sampling rate. For
  instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
  of client requests with the appropriate headers to be force traced. This field is a direct
  analog for the runtime variable 'tracing.global_enabled' in the
  :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
  Default: 100%
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.verbose:

verbose
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to annotate spans with additional data. If true, spans will include logs for stream
  events.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.max_path_tag_length:

max_path_tag_length
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Maximum length of the request path to extract and include in the HttpUrl tag. Used to
  truncate lengthy request paths to meet the needs of a tracing backend.
  Default: 256
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags:

custom_tags
  (**repeated** :ref:`type.tracing.v3.CustomTag <envoy_v3_api_msg_type.tracing.v3.CustomTag>`) A list of custom tags with unique tag name to create tags for the active span.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider:

provider
  (:ref:`config.trace.v3.Tracing.Http <envoy_v3_api_msg_config.trace.v3.Tracing.Http>`) Configuration for an external tracing provider.
  If not specified, no tracing will be performed.
  
  .. attention::
    Please be aware that *envoy.tracers.opencensus* provider can only be configured once
    in Envoy lifetime.
    Any attempts to reconfigure it or to use different configurations for different HCM filters
    will be rejected.
    Such a constraint is inherent to OpenCensus itself. It cannot be overcome without changes
    on OpenCensus side.
  
  

.. _envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName:

Enum extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName
------------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L105>`_


.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName.INGRESS:

INGRESS
  *(DEFAULT)* ⁣The HTTP listener is used for ingress/incoming requests.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.OperationName.EGRESS:

EGRESS
  ⁣The HTTP listener is used for egress/outgoing requests.
  
  

.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig:

extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig
-------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L167>`_


.. code-block:: json

  {
    "unix_sockets": "..."
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig.unix_sockets:

unix_sockets
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether unix socket addresses should be considered internal.
  
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails:

extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails
-------------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L177>`_


.. code-block:: json

  {
    "subject": "{...}",
    "cert": "...",
    "chain": "...",
    "dns": "...",
    "uri": "..."
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails.subject:

subject
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether to forward the subject of the client cert. Defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails.cert:

cert
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the entire client cert in URL encoded PEM format. This will appear in the
  XFCC header comma separated from other values with the value Cert="PEM".
  Defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails.chain:

chain
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the entire client cert chain (including the leaf cert) in URL encoded PEM
  format. This will appear in the XFCC header comma separated from other values with the value
  Chain="PEM".
  Defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails.dns:

dns
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the DNS type Subject Alternative Names of the client cert.
  Defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails.uri:

uri
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
  false.
  
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig:

extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig
-----------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L219>`_

The configuration for HTTP upgrades.
For each upgrade type desired, an UpgradeConfig must be added.

.. warning::

   The current implementation of upgrade headers does not handle
   multi-valued upgrade headers. Support for multi-valued headers may be
   added in the future if needed.

.. warning::
   The current implementation of upgrade headers does not work with HTTP/2
   upstreams.

.. code-block:: json

  {
    "upgrade_type": "...",
    "filters": [],
    "enabled": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig.upgrade_type:

upgrade_type
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The case-insensitive name of this upgrade, e.g. "websocket".
  For each upgrade type present in upgrade_configs, requests with
  Upgrade: [upgrade_type]
  will be proxied upstream.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig.filters:

filters
  (**repeated** :ref:`extensions.filters.network.http_connection_manager.v3.HttpFilter <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpFilter>`) If present, this represents the filter chain which will be created for
  this type of upgrade. If no filters are present, the filter chain for
  HTTP connections will be used for this upgrade type.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig.enabled:

enabled
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Determines if upgrades are enabled or disabled by default. Defaults to true.
  This can be overridden on a per-route basis with :ref:`cluster
  <envoy_v3_api_field_config.route.v3.RouteAction.upgrade_configs>` as documented in the
  :ref:`upgrade documentation <arch_overview_upgrades>`.
  
  


.. _envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType:

Enum extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType
------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L42>`_


.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType.AUTO:

AUTO
  *(DEFAULT)* ⁣For every new connection, the connection manager will determine which
  codec to use. This mode supports both ALPN for TLS listeners as well as
  protocol inference for plaintext listeners. If ALPN data is available, it
  is preferred, otherwise protocol inference is used. In almost all cases,
  this is the right option to choose for this setting.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType.HTTP1:

HTTP1
  ⁣The connection manager will assume that the client is speaking HTTP/1.1.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType.HTTP2:

HTTP2
  ⁣The connection manager will assume that the client is speaking HTTP/2
  (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
  Prior knowledge is allowed).
  
  


.. _envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation:

Enum extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation
-----------------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L64>`_


.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation.OVERWRITE:

OVERWRITE
  *(DEFAULT)* ⁣Overwrite any Server header with the contents of server_name.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation.APPEND_IF_ABSENT:

APPEND_IF_ABSENT
  ⁣If no Server header is present, append Server server_name
  If a Server header is present, pass it through.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation.PASS_THROUGH:

PASS_THROUGH
  ⁣Pass through the value of the server header, and do not append a header
  if none is present.
  
  

.. _envoy_v3_api_enum_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails:

Enum extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails
---------------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L79>`_

How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
header.

.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails.SANITIZE:

SANITIZE
  *(DEFAULT)* ⁣Do not send the XFCC header to the next hop. This is the default value.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails.FORWARD_ONLY:

FORWARD_ONLY
  ⁣When the client connection is mTLS (Mutual TLS), forward the XFCC header
  in the request.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails.APPEND_FORWARD:

APPEND_FORWARD
  ⁣When the client connection is mTLS, append the client certificate
  information to the request’s XFCC header and forward it.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails.SANITIZE_SET:

SANITIZE_SET
  ⁣When the client connection is mTLS, reset the XFCC header with the client
  certificate information and send it to the next hop.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails.ALWAYS_FORWARD_ONLY:

ALWAYS_FORWARD_ONLY
  ⁣Always forward the XFCC header in the request, regardless of whether the
  client connection is mTLS.
  
  

.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig:

extensions.filters.network.http_connection_manager.v3.LocalReplyConfig
----------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.LocalReplyConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L588>`_

The configuration to customize local reply returned by Envoy.

.. code-block:: json

  {
    "mappers": [],
    "body_format": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.mappers:

mappers
  (**repeated** :ref:`extensions.filters.network.http_connection_manager.v3.ResponseMapper <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ResponseMapper>`) Configuration of list of mappers which allows to filter and change local response.
  The mappers will be checked by the specified order until one is matched.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.body_format:

body_format
  (:ref:`config.core.v3.SubstitutionFormatString <envoy_v3_api_msg_config.core.v3.SubstitutionFormatString>`) The configuration to form response body from the :ref:`command operators <config_access_log_command_operators>`
  and to specify response content type as one of: plain/text or application/json.
  
  Example one: "plain/text" ``body_format``.
  
  .. validated-code-block:: yaml
    :type-name: envoy.config.core.v3.SubstitutionFormatString
  
    text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
  
  The following response body in "plain/text" format will be generated for a request with
  local reply body of "upstream connection error", response_code=503 and path=/foo.
  
  .. code-block:: text
  
    upstream connect error:503:path=/foo
  
  Example two: "application/json" ``body_format``.
  
  .. validated-code-block:: yaml
    :type-name: envoy.config.core.v3.SubstitutionFormatString
  
    json_format:
      status: "%RESPONSE_CODE%"
      message: "%LOCAL_REPLY_BODY%"
      path: "%REQ(:path)%"
  
  The following response body in "application/json" format would be generated for a request with
  local reply body of "upstream connection error", response_code=503 and path=/foo.
  
  .. code-block:: json
  
   {
     "status": 503,
     "message": "upstream connection error",
     "path": "/foo"
   }
  
  
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ResponseMapper:

extensions.filters.network.http_connection_manager.v3.ResponseMapper
--------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ResponseMapper proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L636>`_

The configuration to filter and change local response.

.. code-block:: json

  {
    "filter": "{...}",
    "status_code": "{...}",
    "body": "{...}",
    "body_format_override": "{...}",
    "headers_to_add": []
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ResponseMapper.filter:

filter
  (:ref:`config.accesslog.v3.AccessLogFilter <envoy_v3_api_msg_config.accesslog.v3.AccessLogFilter>`, *REQUIRED*) Filter to determine if this mapper should apply.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ResponseMapper.status_code:

status_code
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The new response status code if specified.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ResponseMapper.body:

body
  (:ref:`config.core.v3.DataSource <envoy_v3_api_msg_config.core.v3.DataSource>`) The new local reply body text if specified. It will be used in the `%LOCAL_REPLY_BODY%`
  command operator in the `body_format`.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ResponseMapper.body_format_override:

body_format_override
  (:ref:`config.core.v3.SubstitutionFormatString <envoy_v3_api_msg_config.core.v3.SubstitutionFormatString>`) A per mapper `body_format` to override the :ref:`body_format <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.body_format>`.
  It will be used when this mapper is matched.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ResponseMapper.headers_to_add:

headers_to_add
  (**repeated** :ref:`config.core.v3.HeaderValueOption <envoy_v3_api_msg_config.core.v3.HeaderValueOption>`) HTTP headers to add to a local reply. This allows the response mapper to append, to add
  or to override headers of any local reply before it is sent to a downstream client.
  
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds:

extensions.filters.network.http_connection_manager.v3.Rds
---------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.Rds proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L657>`_


.. code-block:: json

  {
    "config_source": "{...}",
    "route_config_name": "..."
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.config_source:

config_source
  (:ref:`config.core.v3.ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>`, *REQUIRED*) Configuration source specifier for RDS.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.route_config_name:

route_config_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the route configuration. This name will be passed to the RDS
  API. This allows an Envoy configuration with multiple HTTP listeners (and
  associated HTTP connection manager filters) to use different route
  configurations.
  
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList:

extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList
-----------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L672>`_

This message is used to work around the limitations with 'oneof' and repeated fields.

.. code-block:: json

  {
    "scoped_route_configurations": []
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList.scoped_route_configurations:

scoped_route_configurations
  (**repeated** :ref:`config.route.v3.ScopedRouteConfiguration <envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration>`, *REQUIRED*) 
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes:

extensions.filters.network.http_connection_manager.v3.ScopedRoutes
------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRoutes proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L681>`_


.. code-block:: json

  {
    "name": "...",
    "scope_key_builder": "{...}",
    "rds_config_source": "{...}",
    "scoped_route_configurations_list": "{...}",
    "scoped_rds": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name assigned to the scoped routing configuration.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scope_key_builder:

scope_key_builder
  (:ref:`extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder>`, *REQUIRED*) The algorithm to use for constructing a scope key for each request.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.rds_config_source:

rds_config_source
  (:ref:`config.core.v3.ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>`, *REQUIRED*) Configuration source specifier for RDS.
  This config source is used to subscribe to RouteConfiguration resources specified in
  ScopedRouteConfiguration messages.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_route_configurations_list:

scoped_route_configurations_list
  (:ref:`extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList>`) The set of routing scopes corresponding to the HCM. A scope is assigned to a request by
  matching a key constructed from the request's attributes according to the algorithm specified
  by the
  :ref:`ScopeKeyBuilder<envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder>`
  in this message.
  
  
  
  Precisely one of :ref:`scoped_route_configurations_list <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_route_configurations_list>`, :ref:`scoped_rds <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_rds>` must be set.
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_rds:

scoped_rds
  (:ref:`extensions.filters.network.http_connection_manager.v3.ScopedRds <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRds>`) The set of routing scopes associated with the HCM will be dynamically loaded via the SRDS
  API. A scope is assigned to a request by matching a key constructed from the request's
  attributes according to the algorithm specified by the
  :ref:`ScopeKeyBuilder<envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder>`
  in this message.
  
  
  
  Precisely one of :ref:`scoped_route_configurations_list <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_route_configurations_list>`, :ref:`scoped_rds <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_rds>` must be set.
  
.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder:

extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder
----------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L694>`_

Specifies the mechanism for constructing "scope keys" based on HTTP request attributes. These
keys are matched against a set of :ref:`Key<envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration.Key>`
objects assembled from :ref:`ScopedRouteConfiguration<envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration>`
messages distributed via SRDS (the Scoped Route Discovery Service) or assigned statically via
:ref:`scoped_route_configurations_list<envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.scoped_route_configurations_list>`.

Upon receiving a request's headers, the Router will build a key using the algorithm specified
by this message. This key will be used to look up the routing table (i.e., the
:ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>`) to use for the request.

.. code-block:: json

  {
    "fragments": []
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.fragments:

fragments
  (**repeated** :ref:`extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder>`, *REQUIRED*) The final(built) scope key consists of the ordered union of these fragments, which are compared in order with the
  fragments of a :ref:`ScopedRouteConfiguration<envoy_v3_api_msg_config.route.v3.ScopedRouteConfiguration>`.
  A missing fragment during comparison will make the key invalid, i.e., the computed key doesn't match any key.
  
  
.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder:

extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder
--------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L699>`_

Specifies the mechanism for constructing key fragments which are composed into scope keys.

.. code-block:: json

  {
    "header_value_extractor": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.header_value_extractor:

header_value_extractor
  (:ref:`extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor>`, *REQUIRED*) Specifies how a header field's value should be extracted.
  
  
  
.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor:

extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor
-----------------------------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L721>`_

Specifies how the value of a header should be extracted.
The following example maps the structure of a header to the fields in this message.

.. code::

             <0> <1>   <-- index
   X-Header: a=b;c=d
   |         || |
   |         || \----> <element_separator>
   |         ||
   |         |\----> <element.separator>
   |         |
   |         \----> <element.key>
   |
   \----> <name>

   Each 'a=b' key-value pair constitutes an 'element' of the header field.

.. code-block:: json

  {
    "name": "...",
    "element_separator": "...",
    "index": "...",
    "element": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the header field to extract the value from.
  
  .. note::
  
    If the header appears multiple times only the first value is used.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.element_separator:

element_separator
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The element separator (e.g., ';' separates 'a;b;c;d').
  Default: empty string. This causes the entirety of the header field to be extracted.
  If this field is set to an empty string and 'index' is used in the oneof below, 'index'
  must be set to 0.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.index:

index
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the zero based index of the element to extract.
  Note Envoy concatenates multiple values of the same header key into a comma separated
  string, the splitting always happens after the concatenation.
  
  
  
  Only one of :ref:`index <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.index>`, :ref:`element <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.element>` may be set.
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.element:

element
  (:ref:`extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement>`) Specifies the key value pair to extract the value from.
  
  
  
  Only one of :ref:`index <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.index>`, :ref:`element <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.element>` may be set.
  
.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement:

extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement
---------------------------------------------------------------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L727>`_

Specifies a header field's key value pair to match on.

.. code-block:: json

  {
    "separator": "...",
    "key": "..."
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement.separator:

separator
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The separator between key and value (e.g., '=' separates 'k=v;...').
  If an element is an empty string, the element is ignored.
  If an element contains no separator, the whole element is parsed as key and the
  fragment value is an empty string.
  If there are multiple values for a matched key, the first value is returned.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The key to match on.
  
  






.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRds:

extensions.filters.network.http_connection_manager.v3.ScopedRds
---------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.ScopedRds proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L811>`_


.. code-block:: json

  {
    "scoped_rds_config_source": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.ScopedRds.scoped_rds_config_source:

scoped_rds_config_source
  (:ref:`config.core.v3.ConfigSource <envoy_v3_api_msg_config.core.v3.ConfigSource>`, *REQUIRED*) Configuration source specifier for scoped RDS.
  
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpFilter:

extensions.filters.network.http_connection_manager.v3.HttpFilter
----------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.HttpFilter proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L821>`_


.. code-block:: json

  {
    "name": "...",
    "typed_config": "{...}",
    "config_discovery": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the filter configuration. The name is used as a fallback to
  select an extension if the type of the configuration proto is not
  sufficient. It also serves as a resource name in ExtensionConfigDS.
  
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.typed_config:

typed_config
  (`Any <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#any>`_) Filter specific configuration which depends on the filter being instantiated. See the supported
  filters for further documentation.
  
  
  
  Only one of :ref:`typed_config <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.typed_config>`, :ref:`config_discovery <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>` may be set.
  
.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery:

config_discovery
  (:ref:`config.core.v3.ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`) Configuration source specifier for an extension configuration discovery service.
  In case of a failure and without the default configuration, the HTTP listener responds with code 500.
  Extension configs delivered through this mechanism are not expected to require warming (see https://github.com/envoyproxy/envoy/issues/12061).
  
  
  
  Only one of :ref:`typed_config <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.typed_config>`, :ref:`config_discovery <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>` may be set.
  


.. _envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.RequestIDExtension:

extensions.filters.network.http_connection_manager.v3.RequestIDExtension
------------------------------------------------------------------------

`[extensions.filters.network.http_connection_manager.v3.RequestIDExtension proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#L846>`_


.. code-block:: json

  {
    "typed_config": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.RequestIDExtension.typed_config:

typed_config
  (`Any <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#any>`_) Request ID extension specific configuration.
  
  

