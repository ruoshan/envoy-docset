.. _envoy_v3_api_file_envoy/extensions/filters/http/router/v3/router.proto:

Router
======

.. _extension_envoy.filters.http.router:


This extension may be referenced by the qualified name *envoy.filters.http.router*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

Router :ref:`configuration overview <config_http_filters_router>`.

.. _envoy_v3_api_msg_extensions.filters.http.router.v3.Router:

extensions.filters.http.router.v3.Router
----------------------------------------

`[extensions.filters.http.router.v3.Router proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/router/v3/router.proto#L22>`_


.. code-block:: json

  {
    "dynamic_stats": "{...}",
    "start_child_span": "...",
    "upstream_log": [],
    "suppress_envoy_headers": "...",
    "strict_check_headers": [],
    "respect_expected_rq_timeout": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.router.v3.Router.dynamic_stats:

dynamic_stats
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the router generates dynamic cluster statistics. Defaults to
  true. Can be disabled in high performance scenarios.
  
  
.. _envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span:

start_child_span
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to start a child span for egress routed calls. This can be
  useful in scenarios where other filters (auth, ratelimit, etc.) make
  outbound calls and have child spans rooted at the same ingress
  parent. Defaults to false.
  
  
.. _envoy_v3_api_field_extensions.filters.http.router.v3.Router.upstream_log:

upstream_log
  (**repeated** :ref:`config.accesslog.v3.AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`) Configuration for HTTP upstream logs emitted by the router. Upstream logs
  are configured in the same way as access logs, but each log entry represents
  an upstream request. Presuming retries are configured, multiple upstream
  requests may be made for each downstream (inbound) request.
  
  
.. _envoy_v3_api_field_extensions.filters.http.router.v3.Router.suppress_envoy_headers:

suppress_envoy_headers
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Do not add any additional *x-envoy-* headers to requests or responses. This
  only affects the :ref:`router filter generated *x-envoy-* headers
  <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
  connection manager may continue to set *x-envoy-* headers.
  
  
.. _envoy_v3_api_field_extensions.filters.http.router.v3.Router.strict_check_headers:

strict_check_headers
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies a list of HTTP headers to strictly validate. Envoy will reject a
  request and respond with HTTP status 400 if the request contains an invalid
  value for any of the headers listed in this field. Strict header checking
  is only supported for the following headers:
  
  Value must be a ','-delimited list (i.e. no spaces) of supported retry
  policy values:
  
  * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
  * :ref:`config_http_filters_router_x-envoy-retry-on`
  
  Value must be an integer:
  
  * :ref:`config_http_filters_router_x-envoy-max-retries`
  * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
  * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
  
  
.. _envoy_v3_api_field_extensions.filters.http.router.v3.Router.respect_expected_rq_timeout:

respect_expected_rq_timeout
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If not set, ingress Envoy will ignore
  :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
  Envoy, when deriving timeout for upstream cluster.
  
  

