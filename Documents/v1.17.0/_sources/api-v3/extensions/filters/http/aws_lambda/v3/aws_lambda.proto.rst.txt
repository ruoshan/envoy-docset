.. _envoy_v3_api_file_envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto:

AWS Lambda
==========

.. _extension_envoy.filters.http.aws_lambda:


This extension may be referenced by the qualified name *envoy.filters.http.aws_lambda*

.. note::
  This extension is functional but has not had substantial production burn time, use only with this caveat.

  This extension is not hardened and should only be used in deployments where both the downstream and upstream are trusted.

AWS Lambda :ref:`configuration overview <config_http_filters_aws_lambda>`.

.. _envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.Config:

extensions.filters.http.aws_lambda.v3.Config
--------------------------------------------

`[extensions.filters.http.aws_lambda.v3.Config proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto#L18>`_

AWS Lambda filter config

.. code-block:: json

  {
    "arn": "...",
    "payload_passthrough": "...",
    "invocation_mode": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.arn:

arn
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The ARN of the AWS Lambda to invoke when the filter is engaged
  Must be in the following format:
  arn:<partition>:lambda:<region>:<account-number>:function:<function-name>
  
  
.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.payload_passthrough:

payload_passthrough
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether to transform the request (headers and body) to a JSON payload or pass it as is.
  
  
.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.invocation_mode:

invocation_mode
  (:ref:`extensions.filters.http.aws_lambda.v3.Config.InvocationMode <envoy_v3_api_enum_extensions.filters.http.aws_lambda.v3.Config.InvocationMode>`) Determines the way to invoke the Lambda function.
  
  

.. _envoy_v3_api_enum_extensions.filters.http.aws_lambda.v3.Config.InvocationMode:

Enum extensions.filters.http.aws_lambda.v3.Config.InvocationMode
----------------------------------------------------------------

`[extensions.filters.http.aws_lambda.v3.Config.InvocationMode proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto#L22>`_


.. _envoy_v3_api_enum_value_extensions.filters.http.aws_lambda.v3.Config.InvocationMode.SYNCHRONOUS:

SYNCHRONOUS
  *(DEFAULT)* ⁣This is the more common mode of invocation, in which Lambda responds after it has completed the function. In
  this mode the output of the Lambda function becomes the response of the HTTP request.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.http.aws_lambda.v3.Config.InvocationMode.ASYNCHRONOUS:

ASYNCHRONOUS
  ⁣In this mode Lambda responds immediately but continues to process the function asynchronously. This mode can be
  used to signal events for example. In this mode, Lambda responds with an acknowledgment that it received the
  call which is translated to an HTTP 200 OK by the filter.
  
  

.. _envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.PerRouteConfig:

extensions.filters.http.aws_lambda.v3.PerRouteConfig
----------------------------------------------------

`[extensions.filters.http.aws_lambda.v3.PerRouteConfig proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto#L47>`_

Per-route configuration for AWS Lambda. This can be useful when invoking a different Lambda function or a different
version of the same Lambda depending on the route.

.. code-block:: json

  {
    "invoke_config": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.PerRouteConfig.invoke_config:

invoke_config
  (:ref:`extensions.filters.http.aws_lambda.v3.Config <envoy_v3_api_msg_extensions.filters.http.aws_lambda.v3.Config>`) 
  

