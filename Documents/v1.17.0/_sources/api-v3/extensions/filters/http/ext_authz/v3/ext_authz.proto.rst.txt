.. _envoy_v3_api_file_envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto:

External Authorization
======================

.. _extension_envoy.filters.http.ext_authz:


This extension may be referenced by the qualified name *envoy.filters.http.ext_authz*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

External Authorization :ref:`configuration overview <config_http_filters_ext_authz>`.

.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.ExtAuthz:

extensions.filters.http.ext_authz.v3.ExtAuthz
---------------------------------------------

`[extensions.filters.http.ext_authz.v3.ExtAuthz proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L27>`_


.. code-block:: json

  {
    "grpc_service": "{...}",
    "http_service": "{...}",
    "transport_api_version": "...",
    "failure_mode_allow": "...",
    "with_request_body": "{...}",
    "clear_route_cache": "...",
    "status_on_error": "{...}",
    "metadata_context_namespaces": [],
    "filter_enabled": "{...}",
    "filter_enabled_metadata": "{...}",
    "deny_at_disable": "{...}",
    "include_peer_certificate": "...",
    "stat_prefix": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.grpc_service:

grpc_service
  (:ref:`config.core.v3.GrpcService <envoy_v3_api_msg_config.core.v3.GrpcService>`) gRPC service configuration (default timeout: 200ms).
  
  External authorization service configuration.
  
  
  Only one of :ref:`grpc_service <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.grpc_service>`, :ref:`http_service <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.http_service>` may be set.
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.http_service:

http_service
  (:ref:`extensions.filters.http.ext_authz.v3.HttpService <envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.HttpService>`) HTTP service configuration (default timeout: 200ms).
  
  External authorization service configuration.
  
  
  Only one of :ref:`grpc_service <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.grpc_service>`, :ref:`http_service <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.http_service>` may be set.
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.transport_api_version:

transport_api_version
  (:ref:`config.core.v3.ApiVersion <envoy_v3_api_enum_config.core.v3.ApiVersion>`) API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
  version of messages used on the wire.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.failure_mode_allow:

failure_mode_allow
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_)  Changes filter's behaviour on errors:
  
   1. When set to true, the filter will *accept* client request even if the communication with
   the authorization service has failed, or if the authorization service has returned a HTTP 5xx
   error.
  
   2. When set to false, ext-authz will *reject* client requests and return a *Forbidden*
   response if the communication with the authorization service has failed, or if the
   authorization service has returned a HTTP 5xx error.
  
  Note that errors can be *always* tracked in the :ref:`stats
  <config_http_filters_ext_authz_stats>`.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body:

with_request_body
  (:ref:`extensions.filters.http.ext_authz.v3.BufferSettings <envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.BufferSettings>`) Enables filter to buffer the client request body and send it within the authorization request.
  A ``x-envoy-auth-partial-body: false|true`` metadata header will be added to the authorization
  request message indicating if the body data is partial.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.clear_route_cache:

clear_route_cache
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Clears route cache in order to allow the external authorization service to correctly affect
  routing decisions. Filter clears all cached routes when:
  
  1. The field is set to *true*.
  
  2. The status returned from the authorization service is a HTTP 200 or gRPC 0.
  
  3. At least one *authorization response header* is added to the client request, or is used for
  altering another client request header.
  
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.status_on_error:

status_on_error
  (:ref:`type.v3.HttpStatus <envoy_v3_api_msg_type.v3.HttpStatus>`) Sets the HTTP status that is returned to the client when there is a network error between the
  filter and the authorization server. The default status is HTTP 403 Forbidden.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.metadata_context_namespaces:

metadata_context_namespaces
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies a list of metadata namespaces whose values, if present, will be passed to the
  ext_authz service as an opaque *protobuf::Struct*.
  
  For example, if the *jwt_authn* filter is used and :ref:`payload_in_metadata
  <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata>` is set,
  then the following will pass the jwt payload to the authorization server.
  
  .. code-block:: yaml
  
     metadata_context_namespaces:
     - envoy.filters.http.jwt_authn
  
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.filter_enabled:

filter_enabled
  (:ref:`config.core.v3.RuntimeFractionalPercent <envoy_v3_api_msg_config.core.v3.RuntimeFractionalPercent>`) Specifies if the filter is enabled.
  
  If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
  Envoy will lookup the runtime key to get the percentage of requests to filter.
  
  If this field is not specified, the filter will be enabled for all requests.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.filter_enabled_metadata:

filter_enabled_metadata
  (:ref:`type.matcher.v3.MetadataMatcher <envoy_v3_api_msg_type.matcher.v3.MetadataMatcher>`) Specifies if the filter is enabled with metadata matcher.
  If this field is not specified, the filter will be enabled for all requests.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.deny_at_disable:

deny_at_disable
  (:ref:`config.core.v3.RuntimeFeatureFlag <envoy_v3_api_msg_config.core.v3.RuntimeFeatureFlag>`) Specifies whether to deny the requests, when the filter is disabled.
  If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFeatureFlag.runtime_key>` is specified,
  Envoy will lookup the runtime key to determine whether to deny request for
  filter protected path at filter disabling. If filter is disabled in
  typed_per_filter_config for the path, requests will not be denied.
  
  If this field is not specified, all requests will be allowed when disabled.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.include_peer_certificate:

include_peer_certificate
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies if the peer certificate is sent to the external service.
  
  When this field is true, Envoy will include the peer X.509 certificate, if available, in the
  :ref:`certificate<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.certificate>`.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optional additional prefix to use when emitting statistics. This allows to distinguish
  emitted statistics between configured *ext_authz* filters in an HTTP filter chain. For example:
  
  .. code-block:: yaml
  
    http_filters:
      - name: envoy.filters.http.ext_authz
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
          stat_prefix: waf # This emits ext_authz.waf.ok, ext_authz.waf.denied, etc.
      - name: envoy.filters.http.ext_authz
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
          stat_prefix: blocker # This emits ext_authz.blocker.ok, ext_authz.blocker.denied, etc.
  
  
  


.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.BufferSettings:

extensions.filters.http.ext_authz.v3.BufferSettings
---------------------------------------------------

`[extensions.filters.http.ext_authz.v3.BufferSettings proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L144>`_

Configuration for buffering the request data.

.. code-block:: json

  {
    "max_request_bytes": "...",
    "allow_partial_message": "...",
    "pack_as_bytes": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.max_request_bytes:

max_request_bytes
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
  *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
  set in this field. Note that this setting will have precedence over :ref:`failure_mode_allow
  <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.failure_mode_allow>`.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.allow_partial_message:

allow_partial_message
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
  The authorization request will be dispatched and no 413 HTTP error will be returned by the
  filter.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.pack_as_bytes:

pack_as_bytes
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, the body sent to the external authorization service is set with raw bytes, it sets
  the :ref:`raw_body<envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.raw_body>`
  field of HTTP request attribute context. Otherwise, :ref:`
  body<envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body>` will be filled
  with UTF-8 string request body.
  
  


.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.HttpService:

extensions.filters.http.ext_authz.v3.HttpService
------------------------------------------------

`[extensions.filters.http.ext_authz.v3.HttpService proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L192>`_

HttpService is used for raw HTTP communication between the filter and the authorization service.
When configured, the filter will parse the client request and use these attributes to call the
authorization server. Depending on the response, the filter may reject or accept the client
request. Note that in any of these events, metadata can be added, removed or overridden by the
filter:

*On authorization request*, a list of allowed request headers may be supplied. See
:ref:`allowed_headers
<envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.allowed_headers>`
for details. Additional headers metadata may be added to the authorization request. See
:ref:`headers_to_add
<envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.headers_to_add>` for
details.

On authorization response status HTTP 200 OK, the filter will allow traffic to the upstream and
additional headers metadata may be added to the original client request. See
:ref:`allowed_upstream_headers
<envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_upstream_headers>`
for details.

On other authorization response statuses, the filter will not allow traffic. Additional headers
metadata as well as body may be added to the client's response. See :ref:`allowed_client_headers
<envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_client_headers>`
for details.

.. code-block:: json

  {
    "server_uri": "{...}",
    "path_prefix": "...",
    "authorization_request": "{...}",
    "authorization_response": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.HttpService.server_uri:

server_uri
  (:ref:`config.core.v3.HttpUri <envoy_v3_api_msg_config.core.v3.HttpUri>`) Sets the HTTP server URI which the authorization requests must be sent to.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.HttpService.path_prefix:

path_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Sets a prefix to the value of authorization request header *Path*.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.HttpService.authorization_request:

authorization_request
  (:ref:`extensions.filters.http.ext_authz.v3.AuthorizationRequest <envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.AuthorizationRequest>`) Settings used for controlling authorization request metadata.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.HttpService.authorization_response:

authorization_response
  (:ref:`extensions.filters.http.ext_authz.v3.AuthorizationResponse <envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.AuthorizationResponse>`) Settings used for controlling authorization response metadata.
  
  


.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.AuthorizationRequest:

extensions.filters.http.ext_authz.v3.AuthorizationRequest
---------------------------------------------------------

`[extensions.filters.http.ext_authz.v3.AuthorizationRequest proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L211>`_


.. code-block:: json

  {
    "allowed_headers": "{...}",
    "headers_to_add": []
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.allowed_headers:

allowed_headers
  (:ref:`type.matcher.v3.ListStringMatcher <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`) Authorization request will include the client request headers that have a correspondent match
  in the :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`. Note that in addition to the
  user's supplied matchers:
  
  1. *Host*, *Method*, *Path* and *Content-Length* are automatically included to the list.
  
  2. *Content-Length* will be set to 0 and the request to the authorization service will not have
  a message body. However, the authorization request can include the buffered client request body
  (controlled by :ref:`with_request_body
  <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body>` setting),
  consequently the value of *Content-Length* of the authorization request reflects the size of
  its payload size.
  
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.headers_to_add:

headers_to_add
  (**repeated** :ref:`config.core.v3.HeaderValue <envoy_v3_api_msg_config.core.v3.HeaderValue>`) Sets a list of headers that will be included to the request to authorization service. Note that
  client request of the same key will be overridden.
  
  


.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.AuthorizationResponse:

extensions.filters.http.ext_authz.v3.AuthorizationResponse
----------------------------------------------------------

`[extensions.filters.http.ext_authz.v3.AuthorizationResponse proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L235>`_


.. code-block:: json

  {
    "allowed_upstream_headers": "{...}",
    "allowed_upstream_headers_to_append": "{...}",
    "allowed_client_headers": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_upstream_headers:

allowed_upstream_headers
  (:ref:`type.matcher.v3.ListStringMatcher <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`) When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
  response headers that have a correspondent match will be added to the original client request.
  Note that coexistent headers will be overridden.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_upstream_headers_to_append:

allowed_upstream_headers_to_append
  (:ref:`type.matcher.v3.ListStringMatcher <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`) When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
  response headers that have a correspondent match will be added to the client's response. Note
  that coexistent headers will be appended.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_client_headers:

allowed_client_headers
  (:ref:`type.matcher.v3.ListStringMatcher <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`) When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`. is set, authorization
  response headers that have a correspondent match will be added to the client's response. Note
  that when this list is *not* set, all the authorization response headers, except *Authority
  (Host)* will be in the response to the client. When a header is included in this list, *Path*,
  *Status*, *Content-Length*, *WWWAuthenticate* and *Location* are automatically added.
  
  


.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute:

extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
-----------------------------------------------------

`[extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L258>`_

Extra settings on a per virtualhost/route/weighted-cluster level.

.. code-block:: json

  {
    "disabled": "...",
    "check_settings": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute.disabled:

disabled
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Disable the ext auth filter for this particular vhost or route.
  If disabled is specified in multiple per-filter-configs, the most specific one will be used.
  
  
  
  Precisely one of :ref:`disabled <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute.disabled>`, :ref:`check_settings <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute.check_settings>` must be set.
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute.check_settings:

check_settings
  (:ref:`extensions.filters.http.ext_authz.v3.CheckSettings <envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.CheckSettings>`) Check request settings for this route.
  
  
  
  Precisely one of :ref:`disabled <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute.disabled>`, :ref:`check_settings <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute.check_settings>` must be set.
  


.. _envoy_v3_api_msg_extensions.filters.http.ext_authz.v3.CheckSettings:

extensions.filters.http.ext_authz.v3.CheckSettings
--------------------------------------------------

`[extensions.filters.http.ext_authz.v3.CheckSettings proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto#L275>`_

Extra settings for the check request.

.. code-block:: json

  {
    "context_extensions": "{...}",
    "disable_request_body_buffering": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.CheckSettings.context_extensions:

context_extensions
  (**repeated** map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_>) Context extensions to set on the CheckRequest's
  :ref:`AttributeContext.context_extensions<envoy_v3_api_field_service.auth.v3.AttributeContext.context_extensions>`
  
  You can use this to provide extra context for the external authorization server on specific
  virtual hosts/routes. For example, adding a context extension on the virtual host level can
  give the ext-authz server information on what virtual host is used without needing to parse the
  host header. If CheckSettings is specified in multiple per-filter-configs, they will be merged
  in order, and the result will be used.
  
  Merge semantics for this field are such that keys from more specific configs override.
  
  .. note::
  
    These settings are only applied to a filter configured with a
    :ref:`grpc_service<envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.grpc_service>`.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ext_authz.v3.CheckSettings.disable_request_body_buffering:

disable_request_body_buffering
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When set to true, disable the configured :ref:`with_request_body
  <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body>` for a route.
  
  

