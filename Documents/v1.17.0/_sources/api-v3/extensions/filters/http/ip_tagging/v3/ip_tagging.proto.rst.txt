.. _envoy_v3_api_file_envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto:

IP tagging
==========

.. _extension_envoy.filters.http.ip_tagging:


This extension may be referenced by the qualified name *envoy.filters.http.ip_tagging*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

IP tagging :ref:`configuration overview <config_http_filters_ip_tagging>`.

.. _envoy_v3_api_msg_extensions.filters.http.ip_tagging.v3.IPTagging:

extensions.filters.http.ip_tagging.v3.IPTagging
-----------------------------------------------

`[extensions.filters.http.ip_tagging.v3.IPTagging proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto#L19>`_


.. code-block:: json

  {
    "request_type": "...",
    "ip_tags": []
  }

.. _envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.request_type:

request_type
  (:ref:`extensions.filters.http.ip_tagging.v3.IPTagging.RequestType <envoy_v3_api_enum_extensions.filters.http.ip_tagging.v3.IPTagging.RequestType>`) The type of request the filter should apply to.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.ip_tags:

ip_tags
  (**repeated** :ref:`extensions.filters.http.ip_tagging.v3.IPTagging.IPTag <envoy_v3_api_msg_extensions.filters.http.ip_tagging.v3.IPTagging.IPTag>`, *REQUIRED*) The set of IP tags for the filter.
  
  
.. _envoy_v3_api_msg_extensions.filters.http.ip_tagging.v3.IPTagging.IPTag:

extensions.filters.http.ip_tagging.v3.IPTagging.IPTag
-----------------------------------------------------

`[extensions.filters.http.ip_tagging.v3.IPTagging.IPTag proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto#L41>`_

Supplies the IP tag name and the IP address subnets.

.. code-block:: json

  {
    "ip_tag_name": "...",
    "ip_list": []
  }

.. _envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.ip_tag_name:

ip_tag_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the IP tag name to apply.
  
  
.. _envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.ip_list:

ip_list
  (**repeated** :ref:`config.core.v3.CidrRange <envoy_v3_api_msg_config.core.v3.CidrRange>`) A list of IP address subnets that will be tagged with
  ip_tag_name. Both IPv4 and IPv6 are supported.
  
  


.. _envoy_v3_api_enum_extensions.filters.http.ip_tagging.v3.IPTagging.RequestType:

Enum extensions.filters.http.ip_tagging.v3.IPTagging.RequestType
----------------------------------------------------------------

`[extensions.filters.http.ip_tagging.v3.IPTagging.RequestType proto] <https://github.com/envoyproxy/envoy/blob/5c801b25cae04f06bf48248c90e87d623d7a6283/api/envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto#L29>`_

The type of requests the filter should apply to. The supported types
are internal, external or both. The
:ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
used to determine if a request is internal and will result in
:ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
being set. The filter defaults to both, and it will apply to all request types.

.. _envoy_v3_api_enum_value_extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.BOTH:

BOTH
  *(DEFAULT)* ⁣Both external and internal requests will be tagged. This is the default value.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.INTERNAL:

INTERNAL
  ⁣Only internal requests will be tagged.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.EXTERNAL:

EXTERNAL
  ⁣Only external requests will be tagged.
  
  
