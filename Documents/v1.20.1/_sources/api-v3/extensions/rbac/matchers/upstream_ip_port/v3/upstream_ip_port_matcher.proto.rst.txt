.. _envoy_v3_api_file_envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto:

RBAC upstream IP and port matcher plugin
========================================




.. _extension_envoy.rbac.matchers.upstream_ip_port:

This extension may be referenced by the qualified name ``envoy.rbac.matchers.upstream_ip_port``

.. note::
  This extension is functional but has not had substantial production burn time, use only with this caveat.

  This extension has an unknown security posture and should only be used in deployments where both the downstream and upstream are trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.rbac.matchers <extension_category_envoy.rbac.matchers>`


.. _envoy_v3_api_msg_extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher:

extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher
------------------------------------------------------------------

:repo:`[extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher proto] <api/envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto#L27>`

This is configuration for matching upstream ip and port.
Note that although both fields are optional, at least one of IP or port must be supplied. If only
one is supplied the other is a wildcard match.
This matcher requires a filter in the chain to have saved the upstream address in the
filter state before the matcher is executed by RBAC filter. The state should be saved with key
`envoy.stream.upstream_address` (See
:repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
Also, See :repo:`proxy_filter.cc<
source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>` for an example of a
filter which populates the FilterState.

.. code-block:: json

  {
    "upstream_ip": "{...}",
    "upstream_port_range": "{...}"
  }

.. _envoy_v3_api_field_extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher.upstream_ip:

upstream_ip
  (:ref:`config.core.v3.CidrRange <envoy_v3_api_msg_config.core.v3.CidrRange>`) A CIDR block that will be used to match the upstream IP.
  Both Ipv4 and Ipv6 ranges can be matched.
  
  
.. _envoy_v3_api_field_extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher.upstream_port_range:

upstream_port_range
  (:ref:`type.v3.Int64Range <envoy_v3_api_msg_type.v3.Int64Range>`) A port range that will be used to match the upstream port.
  
  

