.. _envoy_v3_api_file_envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto:

Proxy Protocol Filter
=====================


This documentation is for the Envoy v3 API.

As of Envoy v1.18 the v2 API has been removed and is no longer supported.

If you are upgrading from v2 API config you may wish to view the v2 API documentation:

    :ref:`config/filter/listener/proxy_protocol/v2/proxy_protocol.proto <v1.17.2:envoy_api_file_envoy/config/filter/listener/proxy_protocol/v2/proxy_protocol.proto>`



.. _extension_envoy.filters.listener.proxy_protocol:

This extension may be referenced by the qualified name ``envoy.filters.listener.proxy_protocol``

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.listener <extension_category_envoy.filters.listener>`

PROXY protocol listener filter.

.. _envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol:

extensions.filters.listener.proxy_protocol.v3.ProxyProtocol
-----------------------------------------------------------

:repo:`[extensions.filters.listener.proxy_protocol.v3.ProxyProtocol proto] <api/envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto#L17>`


.. code-block:: json

  {
    "rules": []
  }

.. _envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.rules:

rules
  (**repeated** :ref:`extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule <envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule>`) The list of rules to apply to requests.
  
  
.. _envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair:

extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair
------------------------------------------------------------------------

:repo:`[extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair proto] <api/envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto#L21>`


.. code-block:: json

  {
    "metadata_namespace": "...",
    "key": "..."
  }

.. _envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair.metadata_namespace:

metadata_namespace
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The namespace â€” if this is empty, the filter's namespace will be used.
  
  
.. _envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The key to use within the namespace.
  
  


.. _envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule:

extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule
----------------------------------------------------------------

:repo:`[extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule proto] <api/envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto#L30>`

A Rule defines what metadata to apply when a header is present or missing.

.. code-block:: json

  {
    "tlv_type": "...",
    "on_tlv_present": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule.tlv_type:

tlv_type
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The type that triggers the rule - required
  TLV type is defined as uint8_t in proxy protocol. See `the spec
  <https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt>`_ for details.
  
  
.. _envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule.on_tlv_present:

on_tlv_present
  (:ref:`extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair <envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair>`) If the TLV type is present, apply this metadata KeyValuePair.
  
  


