.. _envoy_api_file_envoy/config/rbac/v2alpha/rbac.proto:

Role Based Access Control (RBAC)
================================


.. _envoy_api_msg_config.rbac.v2alpha.RBAC:

config.rbac.v2alpha.RBAC
------------------------

`[config.rbac.v2alpha.RBAC proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L47>`_

Role Based Access Control (RBAC) provides service-level and method-level access control for a
service. RBAC policies are additive. The policies are examined in order. A request is allowed
once a matching policy is found (suppose the `action` is ALLOW).

Here is an example of RBAC configuration. It has two policies:

* Service account "cluster.local/ns/default/sa/admin" has full access (empty permission entry
  means full access) to the service.

* Any user (empty principal entry means any user) can read ("GET") the service at paths with
  prefix "/products" or suffix "/reviews" when request header "version" set to either "v1" or
  "v2".

 .. code-block:: yaml

  action: ALLOW
  policies:
    "service-admin":
      permissions:
        - any: true
      principals:
        - authenticated: { name: "cluster.local/ns/default/sa/admin" }
        - authenticated: { name: "cluster.local/ns/default/sa/superuser" }
    "product-viewer":
      permissions:
          - and_rules:
              rules:
                - header: { name: ":method", exact_match: "GET" }
                - header: { name: ":path", regex_match: "/products(/.*)?" }
                - or_rules:
                    rules:
                      - destination_port: 80
                      - destination_port: 443
      principals:
        - any: true


.. code-block:: json

  {
    "action": "...",
    "policies": "{...}"
  }

.. _envoy_api_field_config.rbac.v2alpha.RBAC.action:

action
  (:ref:`config.rbac.v2alpha.RBAC.Action <envoy_api_enum_config.rbac.v2alpha.RBAC.Action>`) The action to take if a policy matches. The request is allowed if and only if:
  
    * `action` is "ALLOWED" and at least one policy matches
    * `action` is "DENY" and none of the policies match
  
  
.. _envoy_api_field_config.rbac.v2alpha.RBAC.policies:

policies
  (map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, :ref:`config.rbac.v2alpha.Policy <envoy_api_msg_config.rbac.v2alpha.Policy>`>) Maps from policy name to policy. A match occurs when at least one policy matches the request.
  
  

.. _envoy_api_enum_config.rbac.v2alpha.RBAC.Action:

Enum config.rbac.v2alpha.RBAC.Action
------------------------------------

`[config.rbac.v2alpha.RBAC.Action proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L49>`_

Should we do safe-list or block-list style access control?

.. _envoy_api_enum_value_config.rbac.v2alpha.RBAC.Action.ALLOW:

ALLOW
  *(DEFAULT)* ⁣The policies grant access to principals. The rest is denied. This is safe-list style
  access control. This is the default type.
  
  
.. _envoy_api_enum_value_config.rbac.v2alpha.RBAC.Action.DENY:

DENY
  ⁣The policies deny access to principals. The rest is allowed. This is block-list style
  access control.
  
  

.. _envoy_api_msg_config.rbac.v2alpha.Policy:

config.rbac.v2alpha.Policy
--------------------------

`[config.rbac.v2alpha.Policy proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L72>`_

Policy specifies a role and the principals that are assigned/denied the role. A policy matches if
and only if at least one of its permissions match the action taking place AND at least one of its
principals match the downstream.

.. code-block:: json

  {
    "permissions": [],
    "principals": []
  }

.. _envoy_api_field_config.rbac.v2alpha.Policy.permissions:

permissions
  (:ref:`config.rbac.v2alpha.Permission <envoy_api_msg_config.rbac.v2alpha.Permission>`, *REQUIRED*) Required. The set of permissions that define a role. Each permission is matched with OR
  semantics. To match all actions for this policy, a single Permission with the `any` field set
  to true should be used.
  
  
.. _envoy_api_field_config.rbac.v2alpha.Policy.principals:

principals
  (:ref:`config.rbac.v2alpha.Principal <envoy_api_msg_config.rbac.v2alpha.Principal>`, *REQUIRED*) Required. The set of principals that are assigned/denied the role based on “action”. Each
  principal is matched with OR semantics. To match all downstreams for this policy, a single
  Principal with the `any` field set to true should be used.
  
  


.. _envoy_api_msg_config.rbac.v2alpha.Permission:

config.rbac.v2alpha.Permission
------------------------------

`[config.rbac.v2alpha.Permission proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L85>`_

Permission defines an action (or actions) that a principal can take.

.. code-block:: json

  {
    "and_rules": "{...}",
    "or_rules": "{...}",
    "any": "...",
    "header": "{...}",
    "destination_ip": "{...}",
    "destination_port": "..."
  }

.. _envoy_api_field_config.rbac.v2alpha.Permission.and_rules:

and_rules
  (:ref:`config.rbac.v2alpha.Permission.Set <envoy_api_msg_config.rbac.v2alpha.Permission.Set>`) A set of rules that all must match in order to define the action.
  
  
  Precisely one of :ref:`and_rules <envoy_api_field_config.rbac.v2alpha.Permission.and_rules>`, :ref:`or_rules <envoy_api_field_config.rbac.v2alpha.Permission.or_rules>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Permission.any>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Permission.header>`, :ref:`destination_ip <envoy_api_field_config.rbac.v2alpha.Permission.destination_ip>`, :ref:`destination_port <envoy_api_field_config.rbac.v2alpha.Permission.destination_port>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Permission.or_rules:

or_rules
  (:ref:`config.rbac.v2alpha.Permission.Set <envoy_api_msg_config.rbac.v2alpha.Permission.Set>`) A set of rules where at least one must match in order to define the action.
  
  
  Precisely one of :ref:`and_rules <envoy_api_field_config.rbac.v2alpha.Permission.and_rules>`, :ref:`or_rules <envoy_api_field_config.rbac.v2alpha.Permission.or_rules>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Permission.any>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Permission.header>`, :ref:`destination_ip <envoy_api_field_config.rbac.v2alpha.Permission.destination_ip>`, :ref:`destination_port <envoy_api_field_config.rbac.v2alpha.Permission.destination_port>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Permission.any:

any
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When any is set, it matches any action.
  
  
  Precisely one of :ref:`and_rules <envoy_api_field_config.rbac.v2alpha.Permission.and_rules>`, :ref:`or_rules <envoy_api_field_config.rbac.v2alpha.Permission.or_rules>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Permission.any>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Permission.header>`, :ref:`destination_ip <envoy_api_field_config.rbac.v2alpha.Permission.destination_ip>`, :ref:`destination_port <envoy_api_field_config.rbac.v2alpha.Permission.destination_port>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Permission.header:

header
  (:ref:`route.HeaderMatcher <envoy_api_msg_route.HeaderMatcher>`) A header (or psuedo-header such as :path or :method) on the incoming HTTP request.
  
  
  Precisely one of :ref:`and_rules <envoy_api_field_config.rbac.v2alpha.Permission.and_rules>`, :ref:`or_rules <envoy_api_field_config.rbac.v2alpha.Permission.or_rules>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Permission.any>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Permission.header>`, :ref:`destination_ip <envoy_api_field_config.rbac.v2alpha.Permission.destination_ip>`, :ref:`destination_port <envoy_api_field_config.rbac.v2alpha.Permission.destination_port>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Permission.destination_ip:

destination_ip
  (:ref:`core.CidrRange <envoy_api_msg_core.CidrRange>`) A CIDR block that describes the destination IP.
  
  
  Precisely one of :ref:`and_rules <envoy_api_field_config.rbac.v2alpha.Permission.and_rules>`, :ref:`or_rules <envoy_api_field_config.rbac.v2alpha.Permission.or_rules>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Permission.any>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Permission.header>`, :ref:`destination_ip <envoy_api_field_config.rbac.v2alpha.Permission.destination_ip>`, :ref:`destination_port <envoy_api_field_config.rbac.v2alpha.Permission.destination_port>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Permission.destination_port:

destination_port
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) A port number that describes the destination port connecting to.
  
  
  Precisely one of :ref:`and_rules <envoy_api_field_config.rbac.v2alpha.Permission.and_rules>`, :ref:`or_rules <envoy_api_field_config.rbac.v2alpha.Permission.or_rules>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Permission.any>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Permission.header>`, :ref:`destination_ip <envoy_api_field_config.rbac.v2alpha.Permission.destination_ip>`, :ref:`destination_port <envoy_api_field_config.rbac.v2alpha.Permission.destination_port>` must be set.
  
.. _envoy_api_msg_config.rbac.v2alpha.Permission.Set:

config.rbac.v2alpha.Permission.Set
----------------------------------

`[config.rbac.v2alpha.Permission.Set proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L89>`_

Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,
each are applied with the associated behavior.

.. code-block:: json

  {
    "rules": []
  }

.. _envoy_api_field_config.rbac.v2alpha.Permission.Set.rules:

rules
  (:ref:`config.rbac.v2alpha.Permission <envoy_api_msg_config.rbac.v2alpha.Permission>`, *REQUIRED*) 
  



.. _envoy_api_msg_config.rbac.v2alpha.Principal:

config.rbac.v2alpha.Principal
-----------------------------

`[config.rbac.v2alpha.Principal proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L117>`_

Principal defines an identity or a group of identities for a downstream subject.

.. code-block:: json

  {
    "and_ids": "{...}",
    "or_ids": "{...}",
    "any": "...",
    "authenticated": "{...}",
    "source_ip": "{...}",
    "header": "{...}"
  }

.. _envoy_api_field_config.rbac.v2alpha.Principal.and_ids:

and_ids
  (:ref:`config.rbac.v2alpha.Principal.Set <envoy_api_msg_config.rbac.v2alpha.Principal.Set>`) A set of identifiers that all must match in order to define the downstream.
  
  
  Precisely one of :ref:`and_ids <envoy_api_field_config.rbac.v2alpha.Principal.and_ids>`, :ref:`or_ids <envoy_api_field_config.rbac.v2alpha.Principal.or_ids>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Principal.any>`, :ref:`authenticated <envoy_api_field_config.rbac.v2alpha.Principal.authenticated>`, :ref:`source_ip <envoy_api_field_config.rbac.v2alpha.Principal.source_ip>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Principal.header>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Principal.or_ids:

or_ids
  (:ref:`config.rbac.v2alpha.Principal.Set <envoy_api_msg_config.rbac.v2alpha.Principal.Set>`) A set of identifiers at least one must match in order to define the downstream.
  
  
  Precisely one of :ref:`and_ids <envoy_api_field_config.rbac.v2alpha.Principal.and_ids>`, :ref:`or_ids <envoy_api_field_config.rbac.v2alpha.Principal.or_ids>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Principal.any>`, :ref:`authenticated <envoy_api_field_config.rbac.v2alpha.Principal.authenticated>`, :ref:`source_ip <envoy_api_field_config.rbac.v2alpha.Principal.source_ip>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Principal.header>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Principal.any:

any
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When any is set, it matches any downstream.
  
  
  Precisely one of :ref:`and_ids <envoy_api_field_config.rbac.v2alpha.Principal.and_ids>`, :ref:`or_ids <envoy_api_field_config.rbac.v2alpha.Principal.or_ids>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Principal.any>`, :ref:`authenticated <envoy_api_field_config.rbac.v2alpha.Principal.authenticated>`, :ref:`source_ip <envoy_api_field_config.rbac.v2alpha.Principal.source_ip>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Principal.header>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Principal.authenticated:

authenticated
  (:ref:`config.rbac.v2alpha.Principal.Authenticated <envoy_api_msg_config.rbac.v2alpha.Principal.Authenticated>`) Authenticated attributes that identify the downstream.
  
  
  Precisely one of :ref:`and_ids <envoy_api_field_config.rbac.v2alpha.Principal.and_ids>`, :ref:`or_ids <envoy_api_field_config.rbac.v2alpha.Principal.or_ids>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Principal.any>`, :ref:`authenticated <envoy_api_field_config.rbac.v2alpha.Principal.authenticated>`, :ref:`source_ip <envoy_api_field_config.rbac.v2alpha.Principal.source_ip>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Principal.header>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Principal.source_ip:

source_ip
  (:ref:`core.CidrRange <envoy_api_msg_core.CidrRange>`) A CIDR block that describes the downstream IP.
  
  
  Precisely one of :ref:`and_ids <envoy_api_field_config.rbac.v2alpha.Principal.and_ids>`, :ref:`or_ids <envoy_api_field_config.rbac.v2alpha.Principal.or_ids>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Principal.any>`, :ref:`authenticated <envoy_api_field_config.rbac.v2alpha.Principal.authenticated>`, :ref:`source_ip <envoy_api_field_config.rbac.v2alpha.Principal.source_ip>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Principal.header>` must be set.
  
.. _envoy_api_field_config.rbac.v2alpha.Principal.header:

header
  (:ref:`route.HeaderMatcher <envoy_api_msg_route.HeaderMatcher>`) A header (or psuedo-header such as :path or :method) on the incoming HTTP request.
  
  
  Precisely one of :ref:`and_ids <envoy_api_field_config.rbac.v2alpha.Principal.and_ids>`, :ref:`or_ids <envoy_api_field_config.rbac.v2alpha.Principal.or_ids>`, :ref:`any <envoy_api_field_config.rbac.v2alpha.Principal.any>`, :ref:`authenticated <envoy_api_field_config.rbac.v2alpha.Principal.authenticated>`, :ref:`source_ip <envoy_api_field_config.rbac.v2alpha.Principal.source_ip>`, :ref:`header <envoy_api_field_config.rbac.v2alpha.Principal.header>` must be set.
  
.. _envoy_api_msg_config.rbac.v2alpha.Principal.Set:

config.rbac.v2alpha.Principal.Set
---------------------------------

`[config.rbac.v2alpha.Principal.Set proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L121>`_

Used in the `and_ids` and `or_ids` fields in the `identifier` oneof. Depending on the context,
each are applied with the associated behavior.

.. code-block:: json

  {
    "ids": []
  }

.. _envoy_api_field_config.rbac.v2alpha.Principal.Set.ids:

ids
  (:ref:`config.rbac.v2alpha.Principal <envoy_api_msg_config.rbac.v2alpha.Principal>`, *REQUIRED*) 
  


.. _envoy_api_msg_config.rbac.v2alpha.Principal.Authenticated:

config.rbac.v2alpha.Principal.Authenticated
-------------------------------------------

`[config.rbac.v2alpha.Principal.Authenticated proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/rbac/v2alpha/rbac.proto#L126>`_

Authentication attributes for a downstream.

.. code-block:: json

  {
    "name": "..."
  }

.. _envoy_api_field_config.rbac.v2alpha.Principal.Authenticated.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the principal. If set, the URI SAN is used from the certificate, otherwise the
  subject field is used. If unset, it applies to any user that is authenticated.
  
  


