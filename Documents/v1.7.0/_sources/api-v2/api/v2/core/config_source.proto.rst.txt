.. _envoy_api_file_envoy/api/v2/core/config_source.proto:

Configuration sources
=====================


.. _envoy_api_msg_core.ApiConfigSource:

core.ApiConfigSource
--------------------

`[core.ApiConfigSource proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/config_source.proto#L17>`_

API configuration source. This identifies the API type and cluster that Envoy
will use to fetch an xDS API.

.. code-block:: json

  {
    "api_type": "...",
    "cluster_names": [],
    "grpc_services": [],
    "refresh_delay": "{...}"
  }

.. _envoy_api_field_core.ApiConfigSource.api_type:

api_type
  (:ref:`core.ApiConfigSource.ApiType <envoy_api_enum_core.ApiConfigSource.ApiType>`) 
  
.. _envoy_api_field_core.ApiConfigSource.cluster_names:

cluster_names
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Multiple cluster names may be provided for REST_LEGACY/REST. If > 1
  cluster is defined, clusters will be cycled through if any kind of failure
  occurs.
  
  .. note::
  
   The cluster with name ``cluster_name`` must be statically defined and its
   type must not be ``EDS``.
  
  
.. _envoy_api_field_core.ApiConfigSource.grpc_services:

grpc_services
  (:ref:`core.GrpcService <envoy_api_msg_core.GrpcService>`) Multiple gRPC services be provided for GRPC. If > 1 cluster is defined,
  services will be cycled through if any kind of failure occurs.
  
  .. note::
  
   If a gRPC service points to a ``cluster_name``, it must be statically
   defined and its type must not be ``EDS``.
  
  
.. _envoy_api_field_core.ApiConfigSource.refresh_delay:

refresh_delay
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) For REST APIs, the delay between successive polls.
  
  

.. _envoy_api_enum_core.ApiConfigSource.ApiType:

Enum core.ApiConfigSource.ApiType
---------------------------------

`[core.ApiConfigSource.ApiType proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/config_source.proto#L19>`_

APIs may be fetched via either REST or gRPC.

.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.REST_LEGACY:

REST_LEGACY
  *(DEFAULT)* ⁣REST-JSON legacy corresponds to the v1 API.
  
  
.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.REST:

REST
  ⁣REST-JSON v2 API. The `canonical JSON encoding
  <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
  the v2 protos is used.
  
  
.. _envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC:

GRPC
  ⁣gRPC v2 API.
  
  

.. _envoy_api_msg_core.AggregatedConfigSource:

core.AggregatedConfigSource
---------------------------

`[core.AggregatedConfigSource proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/config_source.proto#L56>`_

Aggregated Discovery Service (ADS) options. This is currently empty, but when
set in :ref:`ConfigSource <envoy_api_msg_core.ConfigSource>` can be used to
specify that ADS is to be used.

.. code-block:: json

  {}




.. _envoy_api_msg_core.ConfigSource:

core.ConfigSource
-----------------

`[core.ConfigSource proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/config_source.proto#L65>`_

Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
<config_cluster_manager_cluster>`, :ref:`routes
<config_http_conn_man_route_table>`, :ref:`endpoints
<arch_overview_service_discovery>` etc. may either be sourced from the
filesystem or from an xDS API source. Filesystem configs are watched with
inotify for updates.

.. code-block:: json

  {
    "path": "...",
    "api_config_source": "{...}",
    "ads": "{...}"
  }

.. _envoy_api_field_core.ConfigSource.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Path on the filesystem to source and watch for configuration updates.
  
  .. note::
  
   The path to the source must exist at config load time.
  
  .. note::
  
    Envoy will only watch the file path for *moves.* This is because in general only moves
    are atomic. The same method of swapping files as is demonstrated in the
    :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be used here also.
  
  
  Precisely one of :ref:`path <envoy_api_field_core.ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_core.ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_core.ConfigSource.ads>` must be set.
  
.. _envoy_api_field_core.ConfigSource.api_config_source:

api_config_source
  (:ref:`core.ApiConfigSource <envoy_api_msg_core.ApiConfigSource>`) API configuration source.
  
  
  Precisely one of :ref:`path <envoy_api_field_core.ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_core.ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_core.ConfigSource.ads>` must be set.
  
.. _envoy_api_field_core.ConfigSource.ads:

ads
  (:ref:`core.AggregatedConfigSource <envoy_api_msg_core.AggregatedConfigSource>`) When set, ADS will be used to fetch resources. The ADS API configuration
  source in the bootstrap configuration is used.
  
  
  Precisely one of :ref:`path <envoy_api_field_core.ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_core.ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_core.ConfigSource.ads>` must be set.
  

