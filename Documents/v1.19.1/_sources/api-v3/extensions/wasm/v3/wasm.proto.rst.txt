.. _envoy_v3_api_file_envoy/extensions/wasm/v3/wasm.proto:

Wasm
====




.. _extension_envoy.bootstrap.wasm:

This extension may be referenced by the qualified name ``envoy.bootstrap.wasm``

.. note::
  This extension is functional but has not had substantial production burn time, use only with this caveat.

  This extension has an unknown security posture and should only be used in deployments where both the downstream and upstream are trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.bootstrap <extension_category_envoy.bootstrap>`


.. _envoy_v3_api_msg_extensions.wasm.v3.CapabilityRestrictionConfig:

extensions.wasm.v3.CapabilityRestrictionConfig
----------------------------------------------

:repo:`[extensions.wasm.v3.CapabilityRestrictionConfig proto] <api/envoy/extensions/wasm/v3/wasm.proto#L20>`

Configuration for restricting Proxy-Wasm capabilities available to modules.

.. code-block:: json

  {
    "allowed_capabilities": "{...}"
  }

.. _envoy_v3_api_field_extensions.wasm.v3.CapabilityRestrictionConfig.allowed_capabilities:

allowed_capabilities
  (**repeated** map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, :ref:`extensions.wasm.v3.SanitizationConfig <envoy_v3_api_msg_extensions.wasm.v3.SanitizationConfig>`>) The Proxy-Wasm capabilities which will be allowed. Capabilities are mapped by
  name. The *SanitizationConfig* which each capability maps to is currently unimplemented and ignored,
  and so should be left empty.
  
  The capability names are given in the
  `Proxy-Wasm ABI <https://github.com/proxy-wasm/spec/tree/master/abi-versions/vNEXT>`_.
  Additionally, the following WASI capabilities from
  `this list <https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#modules>`_
  are implemented and can be allowed:
  *fd_write*, *fd_read*, *fd_seek*, *fd_close*, *fd_fdstat_get*, *environ_get*, *environ_sizes_get*,
  *args_get*, *args_sizes_get*, *proc_exit*, *clock_time_get*, *random_get*.
  
  


.. _envoy_v3_api_msg_extensions.wasm.v3.SanitizationConfig:

extensions.wasm.v3.SanitizationConfig
-------------------------------------

:repo:`[extensions.wasm.v3.SanitizationConfig proto] <api/envoy/extensions/wasm/v3/wasm.proto#L38>`

Configuration for sanitization of inputs to an allowed capability.

NOTE: This is currently unimplemented.




.. _envoy_v3_api_msg_extensions.wasm.v3.VmConfig:

extensions.wasm.v3.VmConfig
---------------------------

:repo:`[extensions.wasm.v3.VmConfig proto] <api/envoy/extensions/wasm/v3/wasm.proto#L43>`

Configuration for a Wasm VM.

.. code-block:: json

  {
    "vm_id": "...",
    "runtime": "...",
    "code": "{...}",
    "configuration": "{...}",
    "allow_precompiled": "...",
    "nack_on_code_cache_miss": "...",
    "environment_variables": "{...}"
  }

.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.vm_id:

vm_id
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An ID which will be used along with a hash of the wasm code (or the name of the registered Null
  VM plugin) to determine which VM will be used for the plugin. All plugins which use the same
  *vm_id* and code will use the same VM. May be left blank. Sharing a VM between plugins can
  reduce memory utilization and make sharing of data easier which may have security implications.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.runtime:

runtime
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The Wasm runtime type.
  Available Wasm runtime types are registered as extensions. The following runtimes are included
  in Envoy code base:
  
  .. _extension_envoy.wasm.runtime.null:
  
  **envoy.wasm.runtime.null**: Null sandbox, the Wasm module must be compiled and linked into the
  Envoy binary. The registered name is given in the *code* field as *inline_string*.
  
  .. _extension_envoy.wasm.runtime.v8:
  
  **envoy.wasm.runtime.v8**: `V8 <https://v8.dev/>`_-based WebAssembly runtime.
  
  .. _extension_envoy.wasm.runtime.wamr:
  
  **envoy.wasm.runtime.wamr**: `WAMR <https://github.com/bytecodealliance/wasm-micro-runtime/>`_-based WebAssembly runtime.
  This runtime is not enabled in the official build.
  
  .. _extension_envoy.wasm.runtime.wavm:
  
  **envoy.wasm.runtime.wavm**: `WAVM <https://wavm.github.io/>`_-based WebAssembly runtime.
  This runtime is not enabled in the official build.
  
  .. _extension_envoy.wasm.runtime.wasmtime:
  
  **envoy.wasm.runtime.wasmtime**: `Wasmtime <https://wasmtime.dev/>`_-based WebAssembly runtime.
  This runtime is not enabled in the official build.
  
  
  
  .. _extension_category_envoy.wasm.runtime:
  
  .. tip::
    This extension category has the following known extensions:
  
  
    - :ref:`envoy.wasm.runtime.null <extension_envoy.wasm.runtime.null>`
  
    - :ref:`envoy.wasm.runtime.v8 <extension_envoy.wasm.runtime.v8>`
  
    - :ref:`envoy.wasm.runtime.wamr <extension_envoy.wasm.runtime.wamr>`
  
    - :ref:`envoy.wasm.runtime.wasmtime <extension_envoy.wasm.runtime.wasmtime>`
  
    - :ref:`envoy.wasm.runtime.wavm <extension_envoy.wasm.runtime.wavm>`
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.code:

code
  (:ref:`config.core.v3.AsyncDataSource <envoy_v3_api_msg_config.core.v3.AsyncDataSource>`) The Wasm code that Envoy will execute.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.configuration:

configuration
  (`Any <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#any>`_) The Wasm configuration used in initialization of a new VM
  (proxy_on_start). `google.protobuf.Struct` is serialized as JSON before
  passing it to the plugin. `google.protobuf.BytesValue` and
  `google.protobuf.StringValue` are passed directly without the wrapper.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.allow_precompiled:

allow_precompiled
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Allow the wasm file to include pre-compiled code on VMs which support it.
  Warning: this should only be enable for trusted sources as the precompiled code is not
  verified.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.nack_on_code_cache_miss:

nack_on_code_cache_miss
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true and the code needs to be remotely fetched and it is not in the cache then NACK the configuration
  update and do a background fetch to fill the cache, otherwise fetch the code asynchronously and enter
  warming state.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.VmConfig.environment_variables:

environment_variables
  (:ref:`extensions.wasm.v3.EnvironmentVariables <envoy_v3_api_msg_extensions.wasm.v3.EnvironmentVariables>`) Specifies environment variables to be injected to this VM which will be available through
  WASI's ``environ_get`` and ``environ_get_sizes`` system calls. Note that these functions are mostly implicitly
  called in your language's standard library, so you do not need to call them directly and you can access to env
  vars just like when you do on native platforms.
  Warning: Envoy rejects the configuration if there's conflict of key space.
  
  


.. _envoy_v3_api_msg_extensions.wasm.v3.EnvironmentVariables:

extensions.wasm.v3.EnvironmentVariables
---------------------------------------

:repo:`[extensions.wasm.v3.EnvironmentVariables proto] <api/envoy/extensions/wasm/v3/wasm.proto#L109>`


.. code-block:: json

  {
    "host_env_keys": [],
    "key_values": "{...}"
  }

.. _envoy_v3_api_field_extensions.wasm.v3.EnvironmentVariables.host_env_keys:

host_env_keys
  (**repeated** `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The keys of *Envoy's* environment variables exposed to this VM. In other words, if a key exists in Envoy's environment
  variables, then that key-value pair will be injected. Note that if a key does not exist, it will be ignored.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.EnvironmentVariables.key_values:

key_values
  (**repeated** map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_>) Explicitly given key-value pairs to be injected to this VM in the form of "KEY=VALUE".
  
  


.. _envoy_v3_api_msg_extensions.wasm.v3.PluginConfig:

extensions.wasm.v3.PluginConfig
-------------------------------

:repo:`[extensions.wasm.v3.PluginConfig proto] <api/envoy/extensions/wasm/v3/wasm.proto#L120>`

Base Configuration for Wasm Plugins e.g. filters and services.

.. code-block:: json

  {
    "name": "...",
    "root_id": "...",
    "vm_config": "{...}",
    "configuration": "{...}",
    "fail_open": "...",
    "capability_restriction_config": "{...}"
  }

.. _envoy_v3_api_field_extensions.wasm.v3.PluginConfig.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) A unique name for a filters/services in a VM for use in identifying the filter/service if
  multiple filters/services are handled by the same *vm_id* and *root_id* and for
  logging/debugging.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.PluginConfig.root_id:

root_id
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) A unique ID for a set of filters/services in a VM which will share a RootContext and Contexts
  if applicable (e.g. an Wasm HttpFilter and an Wasm AccessLog). If left blank, all
  filters/services with a blank root_id with the same *vm_id* will share Context(s).
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.PluginConfig.vm_config:

vm_config
  (:ref:`extensions.wasm.v3.VmConfig <envoy_v3_api_msg_extensions.wasm.v3.VmConfig>`) 
  Configuration for finding or starting VM.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.PluginConfig.configuration:

configuration
  (`Any <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#any>`_) Filter/service configuration used to configure or reconfigure a plugin
  (proxy_on_configuration).
  `google.protobuf.Struct` is serialized as JSON before
  passing it to the plugin. `google.protobuf.BytesValue` and
  `google.protobuf.StringValue` are passed directly without the wrapper.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.PluginConfig.fail_open:

fail_open
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If there is a fatal error on the VM (e.g. exception, abort(), on_start or on_configure return false),
  then all plugins associated with the VM will either fail closed (by default), e.g. by returning an HTTP 503 error,
  or fail open (if 'fail_open' is set to true) by bypassing the filter. Note: when on_start or on_configure return false
  during xDS updates the xDS configuration will be rejected and when on_start or on_configuration return false on initial
  startup the proxy will not start.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.PluginConfig.capability_restriction_config:

capability_restriction_config
  (:ref:`extensions.wasm.v3.CapabilityRestrictionConfig <envoy_v3_api_msg_extensions.wasm.v3.CapabilityRestrictionConfig>`) Configuration for restricting Proxy-Wasm capabilities available to modules.
  
  


.. _envoy_v3_api_msg_extensions.wasm.v3.WasmService:

extensions.wasm.v3.WasmService
------------------------------

:repo:`[extensions.wasm.v3.WasmService proto] <api/envoy/extensions/wasm/v3/wasm.proto#L157>`

WasmService is configured as a built-in *envoy.wasm_service* :ref:`WasmService
<config_wasm_service>` This opaque configuration will be used to create a Wasm Service.

.. code-block:: json

  {
    "config": "{...}",
    "singleton": "..."
  }

.. _envoy_v3_api_field_extensions.wasm.v3.WasmService.config:

config
  (:ref:`extensions.wasm.v3.PluginConfig <envoy_v3_api_msg_extensions.wasm.v3.PluginConfig>`) General plugin configuration.
  
  
.. _envoy_v3_api_field_extensions.wasm.v3.WasmService.singleton:

singleton
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, create a single VM rather than creating one VM per worker. Such a singleton can
  not be used with filters.
  
  

