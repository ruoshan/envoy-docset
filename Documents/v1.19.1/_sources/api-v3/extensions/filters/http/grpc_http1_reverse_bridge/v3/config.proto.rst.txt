.. _envoy_v3_api_file_envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto:

gRPC HTTP/1.1 Reverse Bridge
============================


This documentation is for the Envoy v3 API.

As of Envoy v1.18 the v2 API has been removed and is no longer supported.

If you are upgrading from v2 API config you may wish to view the v2 API documentation:

    :ref:`config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto <v1.17.2:envoy_api_file_envoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto>`



.. _extension_envoy.filters.http.grpc_http1_reverse_bridge:

This extension may be referenced by the qualified name ``envoy.filters.http.grpc_http1_reverse_bridge``

.. note::
  This extension is functional but has not had substantial production burn time, use only with this caveat.

  This extension has an unknown security posture and should only be used in deployments where both the downstream and upstream are trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.http <extension_category_envoy.filters.http>`

gRPC HTTP/1.1 Reverse Bridge :ref:`configuration overview
<config_http_filters_grpc_http1_reverse_bridge>`.

.. _envoy_v3_api_msg_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig:

extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig
-----------------------------------------------------------------

:repo:`[extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig proto] <api/envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto#L19>`

gRPC reverse bridge filter configuration

.. code-block:: json

  {
    "content_type": "...",
    "withhold_grpc_frames": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.content_type:

content_type
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The content-type to pass to the upstream when the gRPC bridge filter is applied.
  The filter will also validate that the upstream responds with the same content type.
  
  
.. _envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.withhold_grpc_frames:

withhold_grpc_frames
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, Envoy will assume that the upstream doesn't understand gRPC frames and
  strip the gRPC frame from the request, and add it back in to the response. This will
  hide the gRPC semantics from the upstream, allowing it to receive and respond with a
  simple binary encoded protobuf.
  
  


.. _envoy_v3_api_msg_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute:

extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute
-------------------------------------------------------------------------

:repo:`[extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute proto] <api/envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto#L35>`

gRPC reverse bridge filter configuration per virtualhost/route/weighted-cluster level.

.. code-block:: json

  {
    "disabled": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute.disabled:

disabled
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, disables gRPC reverse bridge filter for this particular vhost or route.
  If disabled is specified in multiple per-filter-configs, the most specific one will be used.
  
  

