.. _envoy_v3_api_file_envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto:

Header-To-Metadata Filter
=========================


This documentation is for the Envoy v3 API.

As of Envoy v1.18 the v2 API has been removed and is no longer supported.

If you are upgrading from v2 API config you may wish to view the v2 API documentation:

    :ref:`config/filter/http/header_to_metadata/v2/header_to_metadata.proto <v1.17:envoy_api_file_envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto>`



.. _extension_envoy.filters.http.header_to_metadata:

This extension may be referenced by the qualified name ``envoy.filters.http.header_to_metadata``

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.http <extension_category_envoy.filters.http>`


The configuration for transforming headers into metadata. This is useful
for matching load balancer subsets, logging, etc.

Header to Metadata :ref:`configuration overview <config_http_filters_header_to_metadata>`.

.. _envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config:

extensions.filters.http.header_to_metadata.v3.Config
----------------------------------------------------

:repo:`[extensions.filters.http.header_to_metadata.v3.Config proto] <api/envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto#L25>`


.. code-block:: json

  {
    "request_rules": [],
    "response_rules": []
  }

.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.request_rules:

request_rules
  (**repeated** :ref:`extensions.filters.http.header_to_metadata.v3.Config.Rule <envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config.Rule>`) The list of rules to apply to requests.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.response_rules:

response_rules
  (**repeated** :ref:`extensions.filters.http.header_to_metadata.v3.Config.Rule <envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config.Rule>`) The list of rules to apply to responses.
  
  
.. _envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair:

extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair
-----------------------------------------------------------------

:repo:`[extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair proto] <api/envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto#L51>`


.. code-block:: json

  {
    "metadata_namespace": "...",
    "key": "...",
    "value": "...",
    "regex_value_rewrite": "{...}",
    "type": "...",
    "encode": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair.metadata_namespace:

metadata_namespace
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The namespace — if this is empty, the filter's namespace will be used.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The key to use within the namespace.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair.value:

value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The value to pair with the given key.
  
  When used for a
  :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`
  case, if value is non-empty it'll be used instead of the header value. If both are empty, no metadata is added.
  
  When used for a :ref:`on_header_missing <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing>`
  case, a non-empty value must be provided otherwise no metadata is added.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair.regex_value_rewrite:

regex_value_rewrite
  (:ref:`type.matcher.v3.RegexMatchAndSubstitute <envoy_v3_api_msg_type.matcher.v3.RegexMatchAndSubstitute>`) If present, the header's value will be matched and substituted with this. If there is no match or substitution, the header value
  is used as-is.
  
  This is only used for :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`.
  
  Note: if the `value` field is non-empty this field should be empty.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair.type:

type
  (:ref:`extensions.filters.http.header_to_metadata.v3.Config.ValueType <envoy_v3_api_enum_extensions.filters.http.header_to_metadata.v3.Config.ValueType>`) The value's type — defaults to string.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair.encode:

encode
  (:ref:`extensions.filters.http.header_to_metadata.v3.Config.ValueEncode <envoy_v3_api_enum_extensions.filters.http.header_to_metadata.v3.Config.ValueEncode>`) How is the value encoded, default is NONE (not encoded).
  The value will be decoded accordingly before storing to metadata.
  
  


.. _envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config.Rule:

extensions.filters.http.header_to_metadata.v3.Config.Rule
---------------------------------------------------------

:repo:`[extensions.filters.http.header_to_metadata.v3.Config.Rule proto] <api/envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto#L90>`

A Rule defines what metadata to apply when a header is present or missing.

.. code-block:: json

  {
    "header": "...",
    "cookie": "...",
    "on_header_present": "{...}",
    "on_header_missing": "{...}",
    "remove": "..."
  }

.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.header:

header
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies that a match will be performed on the value of a header or a cookie.
  
  The header to be extracted.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.cookie:

cookie
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The cookie to be extracted.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present:

on_header_present
  (:ref:`extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair <envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair>`) If the header or cookie is present, apply this metadata KeyValuePair.
  
  If the value in the KeyValuePair is non-empty, it'll be used instead
  of the header or cookie value.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing:

on_header_missing
  (:ref:`extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair <envoy_v3_api_msg_extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair>`) If the header or cookie is not present, apply this metadata KeyValuePair.
  
  The value in the KeyValuePair must be set, since it'll be used in lieu
  of the missing header or cookie value.
  
  
.. _envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.remove:

remove
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Whether or not to remove the header after a rule is applied.
  
  This prevents headers from leaking.
  This field is not supported in case of a cookie.
  
  


.. _envoy_v3_api_enum_extensions.filters.http.header_to_metadata.v3.Config.ValueType:

Enum extensions.filters.http.header_to_metadata.v3.Config.ValueType
-------------------------------------------------------------------

:repo:`[extensions.filters.http.header_to_metadata.v3.Config.ValueType proto] <api/envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto#L29>`


.. _envoy_v3_api_enum_value_extensions.filters.http.header_to_metadata.v3.Config.ValueType.STRING:

STRING
  *(DEFAULT)* ⁣
  
.. _envoy_v3_api_enum_value_extensions.filters.http.header_to_metadata.v3.Config.ValueType.NUMBER:

NUMBER
  ⁣
  
.. _envoy_v3_api_enum_value_extensions.filters.http.header_to_metadata.v3.Config.ValueType.PROTOBUF_VALUE:

PROTOBUF_VALUE
  ⁣The value is a serialized `protobuf.Value
  <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
  
  

.. _envoy_v3_api_enum_extensions.filters.http.header_to_metadata.v3.Config.ValueEncode:

Enum extensions.filters.http.header_to_metadata.v3.Config.ValueEncode
---------------------------------------------------------------------

:repo:`[extensions.filters.http.header_to_metadata.v3.Config.ValueEncode proto] <api/envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto#L40>`

ValueEncode defines the encoding algorithm.

.. _envoy_v3_api_enum_value_extensions.filters.http.header_to_metadata.v3.Config.ValueEncode.NONE:

NONE
  *(DEFAULT)* ⁣The value is not encoded.
  
  
.. _envoy_v3_api_enum_value_extensions.filters.http.header_to_metadata.v3.Config.ValueEncode.BASE64:

BASE64
  ⁣The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
  Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
  non-ASCII characters in the header.
  
  
