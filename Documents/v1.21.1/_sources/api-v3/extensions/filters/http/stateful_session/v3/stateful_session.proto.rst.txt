.. _envoy_v3_api_file_envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto:

Stateful session filter
=======================




.. _extension_envoy.filters.http.stateful_session:

This extension may be referenced by the qualified name ``envoy.filters.http.stateful_session``

.. note::
  This extension is functional but has not had substantial production burn time, use only with this caveat.

  This extension has an unknown security posture and should only be used in deployments where both the downstream and upstream are trusted.

.. tip::
  This extension extends and can be used with the following extension category:


  - :ref:`envoy.filters.http <extension_category_envoy.filters.http>`

Stateful session :ref:`configuration overview <config_http_filters_stateful_session>`.

.. _envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSession:

extensions.filters.http.stateful_session.v3.StatefulSession
-----------------------------------------------------------

:repo:`[extensions.filters.http.stateful_session.v3.StatefulSession proto] <api/envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto#L19>`


.. code-block:: json

  {
    "session_state": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSession.session_state:

session_state
  (:ref:`config.core.v3.TypedExtensionConfig <envoy_v3_api_msg_config.core.v3.TypedExtensionConfig>`, *REQUIRED*) Specific implementation of session state. This session state will be used to store and
  get address of the upstream host to which the session is assigned.
  
  
  
  .. _extension_category_envoy.http.stateful_session:
  
  .. tip::
  
    This extension category has the following known extensions:
  
  
    - :ref:`envoy.http.stateful_session.cookie <extension_envoy.http.stateful_session.cookie>`
  
  
  
  
  


.. _envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute:

extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute
-------------------------------------------------------------------

:repo:`[extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute proto] <api/envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto#L28>`


.. code-block:: json

  {
    "disabled": "...",
    "stateful_session": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.disabled:

disabled
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Disable the stateful session filter for this particular vhost or route. If disabled is
  specified in multiple per-filter-configs, the most specific one will be used.
  
  
  
  Precisely one of :ref:`disabled <envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.disabled>`, :ref:`stateful_session <envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.stateful_session>` must be set.
  
.. _envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.stateful_session:

stateful_session
  (:ref:`extensions.filters.http.stateful_session.v3.StatefulSession <envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSession>`) Per-route stateful session configuration that can be served by RDS or static route table.
  
  
  
  Precisely one of :ref:`disabled <envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.disabled>`, :ref:`stateful_session <envoy_v3_api_field_extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.stateful_session>` must be set.
  

