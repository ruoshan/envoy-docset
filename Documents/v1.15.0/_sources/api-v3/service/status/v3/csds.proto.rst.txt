.. _envoy_v3_api_file_envoy/service/status/v3/csds.proto:

Client Status Discovery Service (CSDS)
======================================


.. _envoy_v3_api_msg_service.status.v3.ClientStatusRequest:

service.status.v3.ClientStatusRequest
-------------------------------------

`[service.status.v3.ClientStatusRequest proto] <https://github.com/envoyproxy/envoy/blob/v1.15.0/api/envoy/service/status/v3/csds.proto#L56>`_

Request for client status of clients identified by a list of NodeMatchers.

.. code-block:: json

  {
    "node_matchers": []
  }

.. _envoy_v3_api_field_service.status.v3.ClientStatusRequest.node_matchers:

node_matchers
  (:ref:`type.matcher.v3.NodeMatcher <envoy_v3_api_msg_type.matcher.v3.NodeMatcher>`) Management server can use these match criteria to identify clients.
  The match follows OR semantics.
  
  


.. _envoy_v3_api_msg_service.status.v3.PerXdsConfig:

service.status.v3.PerXdsConfig
------------------------------

`[service.status.v3.PerXdsConfig proto] <https://github.com/envoyproxy/envoy/blob/v1.15.0/api/envoy/service/status/v3/csds.proto#L67>`_

Detailed config (per xDS) with status.

.. code-block:: json

  {
    "status": "...",
    "listener_config": "{...}",
    "cluster_config": "{...}",
    "route_config": "{...}",
    "scoped_route_config": "{...}"
  }

.. _envoy_v3_api_field_service.status.v3.PerXdsConfig.status:

status
  (:ref:`service.status.v3.ConfigStatus <envoy_v3_api_enum_service.status.v3.ConfigStatus>`) 
  
.. _envoy_v3_api_field_service.status.v3.PerXdsConfig.listener_config:

listener_config
  (:ref:`admin.v3.ListenersConfigDump <envoy_v3_api_msg_admin.v3.ListenersConfigDump>`) 
  
  
  Only one of :ref:`listener_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.listener_config>`, :ref:`cluster_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.cluster_config>`, :ref:`route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.route_config>`, :ref:`scoped_route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.scoped_route_config>` may be set.
  
.. _envoy_v3_api_field_service.status.v3.PerXdsConfig.cluster_config:

cluster_config
  (:ref:`admin.v3.ClustersConfigDump <envoy_v3_api_msg_admin.v3.ClustersConfigDump>`) 
  
  
  Only one of :ref:`listener_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.listener_config>`, :ref:`cluster_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.cluster_config>`, :ref:`route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.route_config>`, :ref:`scoped_route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.scoped_route_config>` may be set.
  
.. _envoy_v3_api_field_service.status.v3.PerXdsConfig.route_config:

route_config
  (:ref:`admin.v3.RoutesConfigDump <envoy_v3_api_msg_admin.v3.RoutesConfigDump>`) 
  
  
  Only one of :ref:`listener_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.listener_config>`, :ref:`cluster_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.cluster_config>`, :ref:`route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.route_config>`, :ref:`scoped_route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.scoped_route_config>` may be set.
  
.. _envoy_v3_api_field_service.status.v3.PerXdsConfig.scoped_route_config:

scoped_route_config
  (:ref:`admin.v3.ScopedRoutesConfigDump <envoy_v3_api_msg_admin.v3.ScopedRoutesConfigDump>`) 
  
  
  Only one of :ref:`listener_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.listener_config>`, :ref:`cluster_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.cluster_config>`, :ref:`route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.route_config>`, :ref:`scoped_route_config <envoy_v3_api_field_service.status.v3.PerXdsConfig.scoped_route_config>` may be set.
  



.. _envoy_v3_api_msg_service.status.v3.ClientConfig:

service.status.v3.ClientConfig
------------------------------

`[service.status.v3.ClientConfig proto] <https://github.com/envoyproxy/envoy/blob/v1.15.0/api/envoy/service/status/v3/csds.proto#L88>`_

All xds configs for a particular client.

.. code-block:: json

  {
    "node": "{...}",
    "xds_config": []
  }

.. _envoy_v3_api_field_service.status.v3.ClientConfig.node:

node
  (:ref:`config.core.v3.Node <envoy_v3_api_msg_config.core.v3.Node>`) Node for a particular client.
  
  
.. _envoy_v3_api_field_service.status.v3.ClientConfig.xds_config:

xds_config
  (:ref:`service.status.v3.PerXdsConfig <envoy_v3_api_msg_service.status.v3.PerXdsConfig>`) 
  


.. _envoy_v3_api_msg_service.status.v3.ClientStatusResponse:

service.status.v3.ClientStatusResponse
--------------------------------------

`[service.status.v3.ClientStatusResponse proto] <https://github.com/envoyproxy/envoy/blob/v1.15.0/api/envoy/service/status/v3/csds.proto#L98>`_


.. code-block:: json

  {
    "config": []
  }

.. _envoy_v3_api_field_service.status.v3.ClientStatusResponse.config:

config
  (:ref:`service.status.v3.ClientConfig <envoy_v3_api_msg_service.status.v3.ClientConfig>`) Client configs for the clients specified in the ClientStatusRequest.
  
  

.. _envoy_v3_api_enum_service.status.v3.ConfigStatus:

Enum service.status.v3.ConfigStatus
-----------------------------------

`[service.status.v3.ConfigStatus proto] <https://github.com/envoyproxy/envoy/blob/v1.15.0/api/envoy/service/status/v3/csds.proto#L37>`_

Status of a config.

.. _envoy_v3_api_enum_value_service.status.v3.ConfigStatus.UNKNOWN:

UNKNOWN
  *(DEFAULT)* ⁣Status info is not available/unknown.
  
  
.. _envoy_v3_api_enum_value_service.status.v3.ConfigStatus.SYNCED:

SYNCED
  ⁣Management server has sent the config to client and received ACK.
  
  
.. _envoy_v3_api_enum_value_service.status.v3.ConfigStatus.NOT_SENT:

NOT_SENT
  ⁣Config is not sent.
  
  
.. _envoy_v3_api_enum_value_service.status.v3.ConfigStatus.STALE:

STALE
  ⁣Management server has sent the config to client but hasn’t received
  ACK/NACK.
  
  
.. _envoy_v3_api_enum_value_service.status.v3.ConfigStatus.ERROR:

ERROR
  ⁣Management server has sent the config to client but received NACK.
  
  
