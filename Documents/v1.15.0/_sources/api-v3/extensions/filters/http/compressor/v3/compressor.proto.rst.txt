.. _envoy_v3_api_file_envoy/extensions/filters/http/compressor/v3/compressor.proto:

Compressor
==========

.. _extension_envoy.filters.http.compressor:


This extension may be referenced by the qualified name *envoy.filters.http.compressor*

.. note::
  

  This extension is intended to be robust against untrusted downstream traffic. It assumes that the upstream is trusted.

Compressor :ref:`configuration overview <config_http_filters_compressor>`.

.. _envoy_v3_api_msg_extensions.filters.http.compressor.v3.Compressor:

extensions.filters.http.compressor.v3.Compressor
------------------------------------------------

`[extensions.filters.http.compressor.v3.Compressor proto] <https://github.com/envoyproxy/envoy/blob/v1.15.0/api/envoy/extensions/filters/http/compressor/v3/compressor.proto#L24>`_


.. code-block:: json

  {
    "content_length": "{...}",
    "content_type": [],
    "disable_on_etag_header": "...",
    "remove_accept_encoding_header": "...",
    "runtime_enabled": "{...}",
    "compressor_library": "{...}"
  }

.. _envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.content_length:

content_length
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Minimum response length, in bytes, which will trigger compression. The default value is 30.
  
  
.. _envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.content_type:

content_type
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Set of strings that allows specifying which mime-types yield compression; e.g.,
  application/json, text/html, etc. When this field is not defined, compression will be applied
  to the following mime-types: "application/javascript", "application/json",
  "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
  and their synonyms.
  
  
.. _envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.disable_on_etag_header:

disable_on_etag_header
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, disables compression when the response contains an etag header. When it is false, the
  filter will preserve weak etags and remove the ones that require strong validation.
  
  
.. _envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.remove_accept_encoding_header:

remove_accept_encoding_header
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, removes accept-encoding from the request headers before dispatching it to the upstream
  so that responses do not get compressed before reaching the filter.
  .. attention:
  
     To avoid interfering with other compression filters in the same chain use this option in
     the filter closest to the upstream.
  
  
.. _envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.runtime_enabled:

runtime_enabled
  (:ref:`config.core.v3.RuntimeFeatureFlag <envoy_v3_api_msg_config.core.v3.RuntimeFeatureFlag>`) Runtime flag that controls whether the filter is enabled or not. If set to false, the
  filter will operate as a pass-through filter. If not specified, defaults to enabled.
  
  
.. _envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.compressor_library:

compressor_library
  (:ref:`config.core.v3.TypedExtensionConfig <envoy_v3_api_msg_config.core.v3.TypedExtensionConfig>`) A compressor library to use for compression. Currently only
  :ref:`envoy.compression.gzip.compressor<envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip>`
  is included in Envoy.
  This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
  
  

