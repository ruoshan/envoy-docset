.. _envoy_api_file_envoy/service/ratelimit/v2/rls.proto:

Rate Limit Service (RLS)
========================


.. _envoy_api_msg_service.ratelimit.v2.RateLimitRequest:

service.ratelimit.v2.RateLimitRequest
-------------------------------------

`[service.ratelimit.v2.RateLimitRequest proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/ratelimit/v2/rls.proto#L25>`_

Main message for a rate limit request. The rate limit service is designed to be fully generic
in the sense that it can operate on arbitrary hierarchical key/value pairs. The loaded
configuration will parse the request and find the most specific limit to apply. In addition,
a RateLimitRequest can contain multiple "descriptors" to limit on. When multiple descriptors
are provided, the server will limit on *ALL* of them and return an OVER_LIMIT response if any
of them are over limit. This enables more complex application level rate limiting scenarios
if desired.

.. code-block:: json

  {
    "domain": "...",
    "descriptors": [],
    "hits_addend": "..."
  }

.. _envoy_api_field_service.ratelimit.v2.RateLimitRequest.domain:

domain
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) All rate limit requests must specify a domain. This enables the configuration to be per
  application without fear of overlap. E.g., "envoy".
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitRequest.descriptors:

descriptors
  (:ref:`ratelimit.RateLimitDescriptor <envoy_api_msg_ratelimit.RateLimitDescriptor>`) All rate limit requests must specify at least one RateLimitDescriptor. Each descriptor is
  processed by the service (see below). If any of the descriptors are over limit, the entire
  request is considered to be over limit.
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitRequest.hits_addend:

hits_addend
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Rate limit requests can optionally specify the number of hits a request adds to the matched
  limit. If the value is not set in the message, a request increases the matched limit by 1.
  
  


.. _envoy_api_msg_service.ratelimit.v2.RateLimitResponse:

service.ratelimit.v2.RateLimitResponse
--------------------------------------

`[service.ratelimit.v2.RateLimitResponse proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/ratelimit/v2/rls.proto#L41>`_

A response from a ShouldRateLimit call.

.. code-block:: json

  {
    "overall_code": "...",
    "statuses": [],
    "headers": []
  }

.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.overall_code:

overall_code
  (:ref:`service.ratelimit.v2.RateLimitResponse.Code <envoy_api_enum_service.ratelimit.v2.RateLimitResponse.Code>`) The overall response code which takes into account all of the descriptors that were passed
  in the RateLimitRequest message.
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.statuses:

statuses
  (:ref:`service.ratelimit.v2.RateLimitResponse.DescriptorStatus <envoy_api_msg_service.ratelimit.v2.RateLimitResponse.DescriptorStatus>`) A list of DescriptorStatus messages which matches the length of the descriptor list passed
  in the RateLimitRequest. This can be used by the caller to determine which individual
  descriptors failed and/or what the currently configured limits are for all of them.
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.headers:

headers
  (:ref:`core.HeaderValue <envoy_api_msg_core.HeaderValue>`) A list of headers to add to the response
  
  
.. _envoy_api_msg_service.ratelimit.v2.RateLimitResponse.RateLimit:

service.ratelimit.v2.RateLimitResponse.RateLimit
------------------------------------------------

`[service.ratelimit.v2.RateLimitResponse.RateLimit proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/ratelimit/v2/rls.proto#L52>`_

Defines an actual rate limit in terms of requests per unit of time and the unit itself.

.. code-block:: json

  {
    "requests_per_unit": "...",
    "unit": "..."
  }

.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.RateLimit.requests_per_unit:

requests_per_unit
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The number of requests per unit of time.
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.RateLimit.unit:

unit
  (:ref:`service.ratelimit.v2.RateLimitResponse.RateLimit.Unit <envoy_api_enum_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit>`) The unit of time.
  
  

.. _envoy_api_enum_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit:

Enum service.ratelimit.v2.RateLimitResponse.RateLimit.Unit
----------------------------------------------------------

`[service.ratelimit.v2.RateLimitResponse.RateLimit.Unit proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/ratelimit/v2/rls.proto#L53>`_


.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit.UNKNOWN:

UNKNOWN
  *(DEFAULT)* ⁣The time unit is not known.
  
  
.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit.SECOND:

SECOND
  ⁣The time unit representing a second.
  
  
.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit.MINUTE:

MINUTE
  ⁣The time unit representing a minute.
  
  
.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit.HOUR:

HOUR
  ⁣The time unit representing an hour.
  
  
.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.RateLimit.Unit.DAY:

DAY
  ⁣The time unit representing a day.
  
  

.. _envoy_api_msg_service.ratelimit.v2.RateLimitResponse.DescriptorStatus:

service.ratelimit.v2.RateLimitResponse.DescriptorStatus
-------------------------------------------------------

`[service.ratelimit.v2.RateLimitResponse.DescriptorStatus proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/ratelimit/v2/rls.proto#L72>`_


.. code-block:: json

  {
    "code": "...",
    "current_limit": "{...}",
    "limit_remaining": "..."
  }

.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.DescriptorStatus.code:

code
  (:ref:`service.ratelimit.v2.RateLimitResponse.Code <envoy_api_enum_service.ratelimit.v2.RateLimitResponse.Code>`) The response code for an individual descriptor.
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.DescriptorStatus.current_limit:

current_limit
  (:ref:`service.ratelimit.v2.RateLimitResponse.RateLimit <envoy_api_msg_service.ratelimit.v2.RateLimitResponse.RateLimit>`) The current limit as configured by the server. Useful for debugging, etc.
  
  
.. _envoy_api_field_service.ratelimit.v2.RateLimitResponse.DescriptorStatus.limit_remaining:

limit_remaining
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The limit remaining in the current time unit.
  
  


.. _envoy_api_enum_service.ratelimit.v2.RateLimitResponse.Code:

Enum service.ratelimit.v2.RateLimitResponse.Code
------------------------------------------------

`[service.ratelimit.v2.RateLimitResponse.Code proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/ratelimit/v2/rls.proto#L42>`_


.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.Code.UNKNOWN:

UNKNOWN
  *(DEFAULT)* ⁣The response code is not known.
  
  
.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.Code.OK:

OK
  ⁣The response code to notify that the number of requests are under limit.
  
  
.. _envoy_api_enum_value_service.ratelimit.v2.RateLimitResponse.Code.OVER_LIMIT:

OVER_LIMIT
  ⁣The response code to notify that the number of requests are over limit.
  
  
