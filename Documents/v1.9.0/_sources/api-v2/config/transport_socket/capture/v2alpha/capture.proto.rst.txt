.. _envoy_api_file_envoy/config/transport_socket/capture/v2alpha/capture.proto:

Capture
=======


.. _envoy_api_msg_config.transport_socket.capture.v2alpha.FileSink:

config.transport_socket.capture.v2alpha.FileSink
------------------------------------------------

`[config.transport_socket.capture.v2alpha.FileSink proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/transport_socket/capture/v2alpha/capture.proto#L16>`_

File sink.

.. warning::

  The current file sink implementation buffers the entire trace in memory
  prior to writing. This will OOM for long lived sockets and/or where there
  is a large amount of traffic on the socket.

.. code-block:: json

  {
    "path_prefix": "...",
    "format": "..."
  }

.. _envoy_api_field_config.transport_socket.capture.v2alpha.FileSink.path_prefix:

path_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Path prefix. The output file will be of the form <path_prefix>_<id>.pb, where <id> is an
  identifier distinguishing the recorded trace for individual socket instances (the Envoy
  connection ID).
  
  
.. _envoy_api_field_config.transport_socket.capture.v2alpha.FileSink.format:

format
  (:ref:`config.transport_socket.capture.v2alpha.FileSink.Format <envoy_api_enum_config.transport_socket.capture.v2alpha.FileSink.Format>`) 
  

.. _envoy_api_enum_config.transport_socket.capture.v2alpha.FileSink.Format:

Enum config.transport_socket.capture.v2alpha.FileSink.Format
------------------------------------------------------------

`[config.transport_socket.capture.v2alpha.FileSink.Format proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/transport_socket/capture/v2alpha/capture.proto#L23>`_

File format.

.. _envoy_api_enum_value_config.transport_socket.capture.v2alpha.FileSink.Format.PROTO_BINARY:

PROTO_BINARY
  *(DEFAULT)* ⁣Binary proto format as per :ref:`Trace
  <envoy_api_msg_data.tap.v2alpha.Trace>`.
  
  
.. _envoy_api_enum_value_config.transport_socket.capture.v2alpha.FileSink.Format.PROTO_TEXT:

PROTO_TEXT
  ⁣Text proto format as per :ref:`Trace
  <envoy_api_msg_data.tap.v2alpha.Trace>`.
  
  

.. _envoy_api_msg_config.transport_socket.capture.v2alpha.Capture:

config.transport_socket.capture.v2alpha.Capture
-----------------------------------------------

`[config.transport_socket.capture.v2alpha.Capture proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/transport_socket/capture/v2alpha/capture.proto#L36>`_

Configuration for capture transport socket. This wraps another transport socket, providing the
ability to interpose and record in plain text any traffic that is surfaced to Envoy.

.. code-block:: json

  {
    "file_sink": "{...}",
    "transport_socket": "{...}"
  }

.. _envoy_api_field_config.transport_socket.capture.v2alpha.Capture.file_sink:

file_sink
  (:ref:`config.transport_socket.capture.v2alpha.FileSink <envoy_api_msg_config.transport_socket.capture.v2alpha.FileSink>`) Trace is to be written to a file sink.
  
  
  
.. _envoy_api_field_config.transport_socket.capture.v2alpha.Capture.transport_socket:

transport_socket
  (:ref:`core.TransportSocket <envoy_api_msg_core.TransportSocket>`) The underlying transport socket being wrapped.
  
  

