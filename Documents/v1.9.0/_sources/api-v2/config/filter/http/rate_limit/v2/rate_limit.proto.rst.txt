.. _envoy_api_file_envoy/config/filter/http/rate_limit/v2/rate_limit.proto:

Rate limit
==========

Rate limit :ref:`configuration overview <config_http_filters_rate_limit>`.

.. _envoy_api_msg_config.filter.http.rate_limit.v2.RateLimit:

config.filter.http.rate_limit.v2.RateLimit
------------------------------------------

`[config.filter.http.rate_limit.v2.RateLimit proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/rate_limit/v2/rate_limit.proto#L15>`_


.. code-block:: json

  {
    "domain": "...",
    "stage": "...",
    "request_type": "...",
    "timeout": "{...}",
    "failure_mode_deny": "...",
    "rate_limited_as_resource_exhausted": "...",
    "rate_limit_service": "{...}"
  }

.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.domain:

domain
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The rate limit domain to use when calling the rate limit service.
  
  
.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.stage:

stage
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the rate limit configurations to be applied with the same
  stage number. If not set, the default stage number is 0.
  
  .. note::
  
   The filter supports a range of 0 - 10 inclusively for stage numbers.
  
  
.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.request_type:

request_type
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The type of requests the filter should apply to. The supported
  types are *internal*, *external* or *both*. A request is considered internal if
  :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is set to true. If
  :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is not set or false, a
  request is considered external. The filter defaults to *both*, and it will apply to all request
  types.
  
  
.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.timeout:

timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The timeout in milliseconds for the rate limit service RPC. If not
  set, this defaults to 20ms.
  
  
.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.failure_mode_deny:

failure_mode_deny
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The filter's behaviour in case the rate limiting service does
  not respond back. When it is set to true, Envoy will not allow traffic in case of
  communication failure between rate limiting service and the proxy.
  Defaults to false.
  
  
.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.rate_limited_as_resource_exhausted:

rate_limited_as_resource_exhausted
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies whether a `RESOURCE_EXHAUSTED` gRPC code must be returned instead
  of the default `UNAVAILABLE` gRPC code for a rate limited gRPC call. The
  HTTP code will be 200 for a gRPC response.
  
  
.. _envoy_api_field_config.filter.http.rate_limit.v2.RateLimit.rate_limit_service:

rate_limit_service
  (:ref:`config.ratelimit.v2.RateLimitServiceConfig <envoy_api_msg_config.ratelimit.v2.RateLimitServiceConfig>`) Configuration for an external rate limit service provider. If not
  specified, any calls to the rate limit service will immediately return
  success.
  
  

