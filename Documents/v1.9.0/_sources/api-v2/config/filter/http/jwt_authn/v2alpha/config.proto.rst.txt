.. _envoy_api_file_envoy/config/filter/http/jwt_authn/v2alpha/config.proto:

envoy/config/filter/http/jwt_authn/v2alpha/config.proto
=======================================================

.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtProvider:

config.filter.http.jwt_authn.v2alpha.JwtProvider
------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.JwtProvider proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L42>`_

Please see following for JWT authentication flow:

* `JSON Web Token (JWT) <https://tools.ietf.org/html/rfc7519>`_
* `The OAuth 2.0 Authorization Framework <https://tools.ietf.org/html/rfc6749>`_
* `OpenID Connect <http://openid.net/connect>`_

A JwtProvider message specifies how a JSON Web Token (JWT) can be verified. It specifies:

* issuer: the principal that issues the JWT. It has to match the one from the token.
* allowed audiences: the ones in the token have to be listed here.
* how to fetch public key JWKS to verify the token signature.
* how to extract JWT token in the request.
* how to pass successfully verified token payload.

Example:

.. code-block:: yaml

    issuer: https://example.com
    audiences:
    - bookstore_android.apps.googleusercontent.com
    - bookstore_web.apps.googleusercontent.com
    remote_jwks:
      http_uri:
        uri: https://example.com/.well-known/jwks.json
        cluster: example_jwks_cluster
      cache_duration:
        seconds: 300


.. code-block:: json

  {
    "issuer": "...",
    "audiences": [],
    "remote_jwks": "{...}",
    "local_jwks": "{...}",
    "forward": "...",
    "from_headers": [],
    "from_params": [],
    "forward_payload_header": "...",
    "payload_in_metadata": "..."
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.issuer:

issuer
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Specify the `principal <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_ that issued
  the JWT, usually a URL or an email address.
  
  Example: https://securetoken.google.com
  Example: 1234567-compute@developer.gserviceaccount.com
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.audiences:

audiences
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The list of JWT `audiences <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_ are
  allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
  will not check audiences in the token.
  
  Example:
  
  .. code-block:: yaml
  
      audiences:
      - bookstore_android.apps.googleusercontent.com
      - bookstore_web.apps.googleusercontent.com
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.remote_jwks:

remote_jwks
  (:ref:`config.filter.http.jwt_authn.v2alpha.RemoteJwks <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.RemoteJwks>`) JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
  URI and how the fetched JWKS should be cached.
  
  Example:
  
  .. code-block:: yaml
  
     remote_jwks:
       http_uri:
         uri: https://www.googleapis.com/oauth2/v1/certs
         cluster: jwt.www.googleapis.com|443
       cache_duration:
         seconds: 300
  
  
  `JSON Web Key Set (JWKS) <https://tools.ietf.org/html/rfc7517#appendix-A>`_ is needed to
  validate signature of a JWT. This field specifies where to fetch JWKS.
  
  
  Precisely one of :ref:`remote_jwks <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.remote_jwks>`, :ref:`local_jwks <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.local_jwks>` must be set.
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.local_jwks:

local_jwks
  (:ref:`core.DataSource <envoy_api_msg_core.DataSource>`) JWKS is in local data source. It could be either in a local file or embedded in the
  inline_string.
  
  Example: local file
  
  .. code-block:: yaml
  
     local_jwks:
       filename: /etc/envoy/jwks/jwks1.txt
  
  Example: inline_string
  
  .. code-block:: yaml
  
     local_jwks:
       inline_string: ACADADADADA
  
  
  `JSON Web Key Set (JWKS) <https://tools.ietf.org/html/rfc7517#appendix-A>`_ is needed to
  validate signature of a JWT. This field specifies where to fetch JWKS.
  
  
  Precisely one of :ref:`remote_jwks <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.remote_jwks>`, :ref:`local_jwks <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.local_jwks>` must be set.
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.forward:

forward
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If false, the JWT is removed in the request after a success verification. If true, the JWT is
  not removed in the request. Default value is false.
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.from_headers:

from_headers
  (:ref:`config.filter.http.jwt_authn.v2alpha.JwtHeader <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtHeader>`) Two fields below define where to extract the JWT from an HTTP request.
  
  If no explicit location is specified, the following default locations are tried in order:
  
  1. The Authorization header using the `Bearer schema
  <https://tools.ietf.org/html/rfc6750#section-2.1>`_. Example::
  
     Authorization: Bearer <token>.
  
  2. `access_token <https://tools.ietf.org/html/rfc6750#section-2.3>`_ query parameter.
  
  Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
  its provider specified or from the default locations.
  
  Specify the HTTP headers to extract JWT token. For examples, following config:
  
  .. code-block:: yaml
  
    from_headers:
    - name: x-goog-iap-jwt-assertion
  
  can be used to extract token from header::
  
    x-goog-iap-jwt-assertion: <JWT>.
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.from_params:

from_params
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
  
  For example, if config is:
  
  .. code-block:: yaml
  
    from_params:
    - jwt_token
  
  The JWT format in query parameter is::
  
     /path?jwt_token=<JWT>
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.forward_payload_header:

forward_payload_header
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) This field specifies the header name to forward a successfully verified JWT payload to the
  backend. The forwarded data is::
  
     base64_encoded(jwt_payload_in_JSON)
  
  If it is not specified, the payload will not be forwarded.
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtProvider.payload_in_metadata:

payload_in_metadata
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
  in the format as: *namespace* is the jwt_authn filter name as **envoy.filters.http.jwt_authn**
  The value is the *protobuf::Struct*. The value of this field will be the key for its *fields*
  and the value is the *protobuf::Struct* converted from JWT JSON payload.
  
  For example, if payload_in_metadata is *my_payload*:
  
  .. code-block:: yaml
  
    envoy.filters.http.jwt_authn:
      my_payload:
        iss: https://example.com
        sub: test@example.com
        aud: https://example.com
        exp: 1501281058
  
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.RemoteJwks:

config.filter.http.jwt_authn.v2alpha.RemoteJwks
-----------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.RemoteJwks proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L180>`_

This message specifies how to fetch JWKS from remote and how to cache it.

.. code-block:: json

  {
    "http_uri": "{...}",
    "cache_duration": "{...}"
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.RemoteJwks.http_uri:

http_uri
  (:ref:`core.HttpUri <envoy_api_msg_core.HttpUri>`) The HTTP URI to fetch the JWKS. For example:
  
  .. code-block:: yaml
  
     http_uri:
       uri: https://www.googleapis.com/oauth2/v1/certs
       cluster: jwt.www.googleapis.com|443
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.RemoteJwks.cache_duration:

cache_duration
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Duration after which the cached JWKS should be expired. If not specified, default cache
  duration is 5 minutes.
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtHeader:

config.filter.http.jwt_authn.v2alpha.JwtHeader
----------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.JwtHeader proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L197>`_

This message specifies a header location to extract JWT token.

.. code-block:: json

  {
    "name": "...",
    "value_prefix": "..."
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtHeader.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The HTTP header name.
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtHeader.value_prefix:

value_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The value prefix. The value format is "value_prefix<token>"
  For example, for "Authorization: Bearer <token>", value_prefix="Bearer " with a space at the
  end.
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences:

config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences
----------------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L208>`_

Specify a required provider with audiences.

.. code-block:: json

  {
    "provider_name": "...",
    "audiences": []
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences.provider_name:

provider_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specify a required provider name.
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences.audiences:

audiences
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) This field overrides the one specified in the JwtProvider.
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirement:

config.filter.http.jwt_authn.v2alpha.JwtRequirement
---------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.JwtRequirement proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L256>`_

This message specifies a Jwt requirement. An empty message means JWT verification is not
required. Here are some config examples:

.. code-block:: yaml

 # Example 1: not required with an empty message

 # Example 2: require A
 provider_name: provider-A

 # Example 3: require A or B
 requires_any:
   requirements:
     - provider_name: provider-A
     - provider_name: provider-B

 # Example 4: require A and B
 requires_all:
   requirements:
     - provider_name: provider-A
     - provider_name: provider-B

 # Example 5: require A and (B or C)
 requires_all:
   requirements:
     - provider_name: provider-A
     - requires_any:
       requirements:
         - provider_name: provider-B
         - provider_name: provider-C

 # Example 6: require A or (B and C)
 requires_any:
   requirements:
     - provider_name: provider-A
     - requires_all:
       requirements:
         - provider_name: provider-B
         - provider_name: provider-C


.. code-block:: json

  {
    "provider_name": "...",
    "provider_and_audiences": "{...}",
    "requires_any": "{...}",
    "requires_all": "{...}",
    "allow_missing_or_failed": "{...}"
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_name:

provider_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specify a required provider name.
  
  
  
  Only one of :ref:`provider_name <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_name>`, :ref:`provider_and_audiences <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_and_audiences>`, :ref:`requires_any <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_any>`, :ref:`requires_all <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_all>`, :ref:`allow_missing_or_failed <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.allow_missing_or_failed>` may be set.
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_and_audiences:

provider_and_audiences
  (:ref:`config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences>`) Specify a required provider with audiences.
  
  
  
  Only one of :ref:`provider_name <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_name>`, :ref:`provider_and_audiences <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_and_audiences>`, :ref:`requires_any <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_any>`, :ref:`requires_all <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_all>`, :ref:`allow_missing_or_failed <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.allow_missing_or_failed>` may be set.
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_any:

requires_any
  (:ref:`config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList>`) Specify list of JwtRequirement. Their results are OR-ed.
  If any one of them passes, the result is passed.
  
  
  
  Only one of :ref:`provider_name <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_name>`, :ref:`provider_and_audiences <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_and_audiences>`, :ref:`requires_any <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_any>`, :ref:`requires_all <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_all>`, :ref:`allow_missing_or_failed <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.allow_missing_or_failed>` may be set.
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_all:

requires_all
  (:ref:`config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList>`) Specify list of JwtRequirement. Their results are AND-ed.
  All of them must pass, if one of them fails or missing, it fails.
  
  
  
  Only one of :ref:`provider_name <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_name>`, :ref:`provider_and_audiences <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_and_audiences>`, :ref:`requires_any <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_any>`, :ref:`requires_all <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_all>`, :ref:`allow_missing_or_failed <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.allow_missing_or_failed>` may be set.
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.allow_missing_or_failed:

allow_missing_or_failed
  (`Empty <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty>`_) The requirement is always satisfied even if JWT is missing or the JWT
  verification fails. A typical usage is: this filter is used to only verify
  JWTs and pass the verified JWT payloads to another filter, the other filter
  will make decision. In this mode, all JWT tokens will be verified.
  
  
  
  Only one of :ref:`provider_name <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_name>`, :ref:`provider_and_audiences <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.provider_and_audiences>`, :ref:`requires_any <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_any>`, :ref:`requires_all <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.requires_all>`, :ref:`allow_missing_or_failed <envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirement.allow_missing_or_failed>` may be set.
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList:

config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList
---------------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L282>`_

This message specifies a list of RequiredProvider.
Their results are OR-ed; if any one of them passes, the result is passed

.. code-block:: json

  {
    "requirements": []
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList.requirements:

requirements
  (:ref:`config.filter.http.jwt_authn.v2alpha.JwtRequirement <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirement>`, *REQUIRED*) Specify a list of JwtRequirement.
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList:

config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList
----------------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L289>`_

This message specifies a list of RequiredProvider.
Their results are AND-ed; all of them must pass, if one of them fails or missing, it fails.

.. code-block:: json

  {
    "requirements": []
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList.requirements:

requirements
  (:ref:`config.filter.http.jwt_authn.v2alpha.JwtRequirement <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirement>`, *REQUIRED*) Specify a list of JwtRequirement.
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.RequirementRule:

config.filter.http.jwt_authn.v2alpha.RequirementRule
----------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.RequirementRule proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L315>`_

This message specifies a Jwt requirement for a specific Route condition.
Example 1:

.. code-block:: yaml

   - match:
       prefix: /healthz

In above example, "requires" field is empty for /healthz prefix match,
it means that requests matching the path prefix don't require JWT authentication.

Example 2:

.. code-block:: yaml

   - match:
       prefix: /
     requires: { provider_name: provider-A }

In above example, all requests matched the path prefix require jwt authentication
from "provider-A".

.. code-block:: json

  {
    "match": "{...}",
    "requires": "{...}"
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.RequirementRule.match:

match
  (:ref:`route.RouteMatch <envoy_api_msg_route.RouteMatch>`, *REQUIRED*) The route matching parameter. Only when the match is satisfied, the "requires" field will
  apply.
  
  For example: following match will match all requests.
  
  .. code-block:: yaml
  
     match:
       prefix: /
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.RequirementRule.requires:

requires
  (:ref:`config.filter.http.jwt_authn.v2alpha.JwtRequirement <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtRequirement>`) Specify a Jwt Requirement. Please detail comment in message JwtRequirement.
  
  


.. _envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtAuthentication:

config.filter.http.jwt_authn.v2alpha.JwtAuthentication
------------------------------------------------------

`[config.filter.http.jwt_authn.v2alpha.JwtAuthentication proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/jwt_authn/v2alpha/config.proto#L373>`_

This is the Envoy HTTP filter config for JWT authentication.

For example:

.. code-block:: yaml

  providers:
     provider1:
       issuer: issuer1
       audiences:
       - audience1
       - audience2
       remote_jwks:
         http_uri:
           uri: https://example.com/.well-known/jwks.json
           cluster: example_jwks_cluster
     provider2:
       issuer: issuer2
       local_jwks:
         inline_string: jwks_string

  rules:
     # Not jwt verification is required for /health path
     - match:
         prefix: /health

     # Jwt verification for provider1 is required for path prefixed with "prefix"
     - match:
         prefix: /prefix
       requires:
         provider_name: provider1

     # Jwt verification for either provider1 or provider2 is required for all other requests.
     - match:
         prefix: /
       requires:
         requires_any:
           requirements:
             - provider_name: provider1
             - provider_name: provider2


.. code-block:: json

  {
    "providers": "{...}",
    "rules": []
  }

.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtAuthentication.providers:

providers
  (map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, :ref:`config.filter.http.jwt_authn.v2alpha.JwtProvider <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.JwtProvider>`>) Map of provider names to JwtProviders.
  
  .. code-block:: yaml
  
    providers:
      provider1:
         issuer: issuer1
         audiences:
         - audience1
         - audience2
         remote_jwks:
           http_uri:
             uri: https://example.com/.well-known/jwks.json
             cluster: example_jwks_cluster
       provider2:
         issuer: provider2
         local_jwks:
           inline_string: jwks_string
  
  
  
.. _envoy_api_field_config.filter.http.jwt_authn.v2alpha.JwtAuthentication.rules:

rules
  (:ref:`config.filter.http.jwt_authn.v2alpha.RequirementRule <envoy_api_msg_config.filter.http.jwt_authn.v2alpha.RequirementRule>`) Specifies requirements based on the route matches. The first matched requirement will be
  applied. If there are overlapped match conditions, please put the most specific match first.
  
  Examples
  
  .. code-block:: yaml
  
  rules:
    - match:
        prefix: /healthz
    - match:
        prefix: /baz
      requires:
        provider_name: provider1
    - match:
        prefix: /foo
      requires:
        requires_any:
          requirements:
            - provider_name: provider1
            - provider_name: provider2
    - match:
        prefix: /bar
      requires:
        requires_all:
          requirements:
            - provider_name: provider1
            - provider_name: provider2
  
  
  

