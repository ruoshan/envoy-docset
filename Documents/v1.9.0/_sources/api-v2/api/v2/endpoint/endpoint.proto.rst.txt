.. _envoy_api_file_envoy/api/v2/endpoint/endpoint.proto:

Endpoints
=========


.. _envoy_api_msg_endpoint.Endpoint:

endpoint.Endpoint
-----------------

`[endpoint.Endpoint proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/endpoint/endpoint.proto#L19>`_

Upstream host identifier.

.. code-block:: json

  {
    "address": "{...}",
    "health_check_config": "{...}"
  }

.. _envoy_api_field_endpoint.Endpoint.address:

address
  (:ref:`core.Address <envoy_api_msg_core.Address>`) The upstream host address.
  
  .. attention::
  
    The form of host address depends on the given cluster type. For STATIC or EDS,
    it is expected to be a direct IP address (or something resolvable by the
    specified :ref:`resolver <envoy_api_field_core.SocketAddress.resolver_name>`
    in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,
    and will be resolved via DNS.
  
  
.. _envoy_api_field_endpoint.Endpoint.health_check_config:

health_check_config
  (:ref:`endpoint.Endpoint.HealthCheckConfig <envoy_api_msg_endpoint.Endpoint.HealthCheckConfig>`) The optional health check configuration is used as configuration for the
  health checker to contact the health checked host.
  
  .. attention::
  
    This takes into effect only for upstream clusters with
    :ref:`active health checking <arch_overview_health_checking>` enabled.
  
  
.. _envoy_api_msg_endpoint.Endpoint.HealthCheckConfig:

endpoint.Endpoint.HealthCheckConfig
-----------------------------------

`[endpoint.Endpoint.HealthCheckConfig proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/endpoint/endpoint.proto#L32>`_

The optional health check configuration.

.. code-block:: json

  {
    "port_value": "..."
  }

.. _envoy_api_field_endpoint.Endpoint.HealthCheckConfig.port_value:

port_value
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optional alternative health check port value.
  
  By default the health check address port of an upstream host is the same
  as the host's serving address port. This provides an alternative health
  check port. Setting this with a non-zero value allows an upstream host
  to have different health check address port.
  
  



.. _envoy_api_msg_endpoint.LbEndpoint:

endpoint.LbEndpoint
-------------------

`[endpoint.LbEndpoint proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/endpoint/endpoint.proto#L53>`_

An Endpoint that Envoy can route traffic to.

.. code-block:: json

  {
    "endpoint": "{...}",
    "health_status": "...",
    "metadata": "{...}",
    "load_balancing_weight": "{...}"
  }

.. _envoy_api_field_endpoint.LbEndpoint.endpoint:

endpoint
  (:ref:`endpoint.Endpoint <envoy_api_msg_endpoint.Endpoint>`) Upstream host identifier
  
  
.. _envoy_api_field_endpoint.LbEndpoint.health_status:

health_status
  (:ref:`core.HealthStatus <envoy_api_enum_core.HealthStatus>`) Optional health status when known and supplied by EDS server.
  
  
.. _envoy_api_field_endpoint.LbEndpoint.metadata:

metadata
  (:ref:`core.Metadata <envoy_api_msg_core.Metadata>`) The endpoint metadata specifies values that may be used by the load
  balancer to select endpoints in a cluster for a given request. The filter
  name should be specified as *envoy.lb*. An example boolean key-value pair
  is *canary*, providing the optional canary status of the upstream host.
  This may be matched against in a route's
  :ref:`RouteAction <envoy_api_msg_route.RouteAction>` metadata_match field
  to subset the endpoints considered in cluster load balancing.
  
  
.. _envoy_api_field_endpoint.LbEndpoint.load_balancing_weight:

load_balancing_weight
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The optional load balancing weight of the upstream host, in the range 1 -
  128. Envoy uses the load balancing weight in some of the built in load
  balancers. The load balancing weight for an endpoint is divided by the sum
  of the weights of all endpoints in the endpoint's locality to produce a
  percentage of traffic for the endpoint. This percentage is then further
  weighted by the endpoint's locality's load balancing weight from
  LocalityLbEndpoints. If unspecified, each host is presumed to have equal
  weight in a locality.
  
  .. attention::
  
    The limit of 128 is somewhat arbitrary, but is applied due to performance
    concerns with the current implementation and can be removed when
    `this issue <https://github.com/envoyproxy/envoy/issues/1285>`_ is fixed.
  
  


.. _envoy_api_msg_endpoint.LocalityLbEndpoints:

endpoint.LocalityLbEndpoints
----------------------------

`[endpoint.LocalityLbEndpoints proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/endpoint/endpoint.proto#L91>`_

A group of endpoints belonging to a Locality.
One can have multiple LocalityLbEndpoints for a locality, but this is
generally only done if the different groups need to have different load
balancing weights or different priorities.

.. code-block:: json

  {
    "locality": "{...}",
    "lb_endpoints": [],
    "load_balancing_weight": "{...}",
    "priority": "..."
  }

.. _envoy_api_field_endpoint.LocalityLbEndpoints.locality:

locality
  (:ref:`core.Locality <envoy_api_msg_core.Locality>`) Identifies location of where the upstream hosts run.
  
  
.. _envoy_api_field_endpoint.LocalityLbEndpoints.lb_endpoints:

lb_endpoints
  (:ref:`endpoint.LbEndpoint <envoy_api_msg_endpoint.LbEndpoint>`) The group of endpoints belonging to the locality specified.
  
  
.. _envoy_api_field_endpoint.LocalityLbEndpoints.load_balancing_weight:

load_balancing_weight
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Optional: Per priority/region/zone/sub_zone weight - range 1-128. The load
  balancing weight for a locality is divided by the sum of the weights of all
  localities  at the same priority level to produce the effective percentage
  of traffic for the locality.
  
  Locality weights are only considered when :ref:`locality weighted load
  balancing <arch_overview_load_balancing_locality_weighted_lb>` is
  configured. These weights are ignored otherwise. If no weights are
  specificed when locality weighted load balancing is enabled, the cluster is
  assumed to have a weight of 1.
  
  .. attention::
  
    The limit of 128 is somewhat arbitrary, but is applied due to performance
    concerns with the current implementation and can be removed when
    `this issue <https://github.com/envoyproxy/envoy/issues/1285>`_ is fixed.
  
  
.. _envoy_api_field_endpoint.LocalityLbEndpoints.priority:

priority
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optional: the priority for this LocalityLbEndpoints. If unspecified this will
  default to the highest priority (0).
  
  Under usual circumstances, Envoy will only select endpoints for the highest
  priority (0). In the event all endpoints for a particular priority are
  unavailable/unhealthy, Envoy will fail over to selecting endpoints for the
  next highest priority group.
  
  Priorities should range from 0 (highest) to N (lowest) without skipping.
  
  

