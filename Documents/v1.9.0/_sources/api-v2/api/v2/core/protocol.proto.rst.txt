.. _envoy_api_file_envoy/api/v2/core/protocol.proto:

Protocol options
================



.. _envoy_api_msg_core.HttpProtocolOptions:

core.HttpProtocolOptions
------------------------

`[core.HttpProtocolOptions proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/protocol.proto#L20>`_


.. code-block:: json

  {
    "idle_timeout": "{...}"
  }

.. _envoy_api_field_core.HttpProtocolOptions.idle_timeout:

idle_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The idle timeout for upstream connection pool connections. The idle timeout is defined as the
  period in which there are no active requests. If not set, there is no idle timeout. When the
  idle timeout is reached the connection will be closed. Note that request based timeouts mean
  that HTTP/2 PINGs will not keep the connection alive.
  
  


.. _envoy_api_msg_core.Http1ProtocolOptions:

core.Http1ProtocolOptions
-------------------------

`[core.Http1ProtocolOptions proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/protocol.proto#L28>`_


.. code-block:: json

  {
    "allow_absolute_url": "{...}",
    "accept_http_10": "...",
    "default_host_for_http_10": "..."
  }

.. _envoy_api_field_core.Http1ProtocolOptions.allow_absolute_url:

allow_absolute_url
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Handle HTTP requests with absolute URLs in the requests. These requests
  are generally sent by clients to forward/explicit proxies. This allows clients to configure
  envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
  *http_proxy* environment variable.
  
  
.. _envoy_api_field_core.Http1ProtocolOptions.accept_http_10:

accept_http_10
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Handle incoming HTTP/1.0 and HTTP 0.9 requests.
  This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
  style connect logic, dechunking, and handling lack of client host iff
  *default_host_for_http_10* is configured.
  
  
.. _envoy_api_field_core.Http1ProtocolOptions.default_host_for_http_10:

default_host_for_http_10
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) A default host for HTTP/1.0 requests. This is highly suggested if *accept_http_10* is true as
  Envoy does not otherwise support HTTP/1.0 without a Host header.
  This is a no-op if *accept_http_10* is not true.
  
  


.. _envoy_api_msg_core.Http2ProtocolOptions:

core.Http2ProtocolOptions
-------------------------

`[core.Http2ProtocolOptions proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/core/protocol.proto#L47>`_


.. code-block:: json

  {
    "hpack_table_size": "{...}",
    "max_concurrent_streams": "{...}",
    "initial_stream_window_size": "{...}",
    "initial_connection_window_size": "{...}",
    "allow_connect": "..."
  }

.. _envoy_api_field_core.Http2ProtocolOptions.hpack_table_size:

hpack_table_size
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) `Maximum table size <http://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
  (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
  range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
  compression.
  
  
.. _envoy_api_field_core.Http2ProtocolOptions.max_concurrent_streams:

max_concurrent_streams
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) `Maximum concurrent streams <http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
  allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
  and defaults to 2147483647.
  
  
.. _envoy_api_field_core.Http2ProtocolOptions.initial_stream_window_size:

initial_stream_window_size
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
  HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
  stop the flow of data to the codec buffers.
  
  
.. _envoy_api_field_core.Http2ProtocolOptions.initial_connection_window_size:

initial_connection_window_size
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Similar to *initial_stream_window_size*, but for connection-level flow-control
  window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
  
  
.. _envoy_api_field_core.Http2ProtocolOptions.allow_connect:

allow_connect
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Allows proxying Websocket and other upgrades over H2 connect.
  
  



